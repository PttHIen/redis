<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NRedisStack</name>
    </assembly>
    <members>
        <member name="M:NRedisStack.BloomCommands.Add(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommands.Card(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommands.Exists(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommands.Info(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommands.Insert(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommands.LoadChunk(StackExchange.Redis.RedisKey,System.Int64,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommands.MAdd(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommands.MExists(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommands.Reserve(StackExchange.Redis.RedisKey,System.Double,System.Int64,System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommands.ScanDump(StackExchange.Redis.RedisKey,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommandsAsync.AddAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommandsAsync.CardAsync(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommandsAsync.ExistsAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommandsAsync.InfoAsync(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommandsAsync.InsertAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommandsAsync.LoadChunkAsync(StackExchange.Redis.RedisKey,System.Int64,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommandsAsync.MAddAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommandsAsync.MExistsAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommandsAsync.ReserveAsync(StackExchange.Redis.RedisKey,System.Double,System.Int64,System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.BloomCommandsAsync.ScanDumpAsync(StackExchange.Redis.RedisKey,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:NRedisStack.Bloom.DataTypes.BloomInformation">
            <summary>
            This class represents the response for BF.INFO command.
            This object has Read-only properties and cannot be generated outside a BF.INFO response.
            </summary>
        </member>
        <member name="M:NRedisStack.IBloomCommands.Add(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Adds an item to a Bloom Filter.
            </summary>
            <param name="key">The key under which the filter is found.</param>
            <param name="item">The item to add.</param>
            <returns><see langword="true"/> if the item did not exist in the filter, <see langword="false"/> otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.add"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommands.Card(StackExchange.Redis.RedisKey)">
            <summary>
            Returns the cardinality of a Bloom filter.
            </summary>
            <param name="key">The name of the filter.</param>
            <returns>number of items that were added to a Bloom filter and detected as unique.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.card"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommands.Exists(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Checks whether an item exist in the Bloom Filter or not.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="item">The item to check for.</param>
            <returns><see langword="true"/> means the item may exist in the filter,
            and <see langword="false"/> means it does not exist in the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.exists"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommands.Info(StackExchange.Redis.RedisKey)">
            <summary>
            Return information about a bloom filter.
            </summary>
            <param name="key">Name of the key to return information about.</param>
            <returns>Information of the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.info"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommands.Insert(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Adds one or more items to a Bloom Filter. A filter will be created if it does not exist.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="items">One or more items to add.</param>
            <param name="capacity">(Optional) Specifies the desired capacity for the filter to be created.</param>
            <param name="error">(Optional) Specifies the error ratio of the newly created filter if it does not yet exist.</param>
            <param name="expansion">(Optional) When capacity is reached, an additional sub-filter is
            created in size of the last sub-filter multiplied by expansion.</param>
            <param name="nocreate">(Optional) <see langword="true"/> to indicates that the
            filter should not be created if it does not already exist.</param>
            <param name="nonscaling">(Optional) <see langword="true"/> toprevent the filter
            from creating additional sub-filters if initial capacity is reached.</param>
            <returns>An array of booleans. Each element is either true or false depending on whether the
            corresponding input element was newly added to the filter or may have previously existed.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.insert"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommands.LoadChunk(StackExchange.Redis.RedisKey,System.Int64,System.Byte[])">
            <summary>
            Restores a filter previosly saved using SCANDUMP.
            </summary>
            <param name="key">Name of the key to restore.</param>
            <param name="iterator">Iterator value associated with data (returned by SCANDUMP).</param>
            <param name="data">Current data chunk (returned by SCANDUMP).</param>
            <returns><see langword="true"/> if executed correctly, error otherwise/></returns>
            <remarks><seealso href="https://redis.io/commands/bf.loadchunk"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommands.MAdd(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Adds one or more items to the Bloom Filter. A filter will be created if it does not exist yet.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="items">One or more items to add.</param>
            <returns>An array of booleans. Each element is either true or false depending on whether the
            corresponding input element was newly added to the filter or may have previously existed.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.madd"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommands.MExists(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Checks whether one or more items may exist in the filter or not.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="items">One or more items to check.</param>
            <returns>An array of booleans, for each item <see langword="true"/> means the item may exist in the filter,
            and <see langword="false"/> means the item may exist in the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.mexists"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommands.Reserve(StackExchange.Redis.RedisKey,System.Double,System.Int64,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Creates a new Bloom Filter.
            </summary>
            <param name="key">The key under which the filter is found.</param>
            <param name="errorRate">The desired probability for false positives (value between 0 to 1).</param>
            <param name="capacity">The number of entries intended to be added to the filter.</param>
            <param name="expansion">(Optional) When capacity is reached, an additional sub-filter is
            created in size of the last sub-filter multiplied by expansion.</param>
            <param name="nonscaling">(Optional) <see langword="true"/> toprevent the filter
            from creating additional sub-filters if initial capacity is reached.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise/></returns>
            <remarks><seealso href="https://redis.io/commands/bf.reserve"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommands.ScanDump(StackExchange.Redis.RedisKey,System.Int64)">
            <summary>
            Restores a filter previosly saved using SCANDUMP.
            </summary>
            <param name="key">Name of the filter.</param>
            <param name="iterator">Iterator value; either 0 or the iterator from a previous invocation of this command.</param>
            <returns>Tuple of iterator and data.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.scandump"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommandsAsync.AddAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Adds an item to a Bloom Filter.
            </summary>
            <param name="key">The key under which the filter is found.</param>
            <param name="item">The item to add.</param>
            <returns><see langword="true"/> if the item did not exist in the filter, <see langword="false"/> otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.add"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommandsAsync.CardAsync(StackExchange.Redis.RedisKey)">
            <summary>
            Returns the cardinality of a Bloom filter.
            </summary>
            <param name="key">The name of the filter.</param>
            <returns>number of items that were added to a Bloom filter and detected as unique.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.card"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommandsAsync.ExistsAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Checks whether an item exist in the Bloom Filter or not.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="item">The item to check for.</param>
            <returns><see langword="true"/> means the item may exist in the filter,
            and <see langword="false"/> means it does not exist in the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.exists"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommandsAsync.InfoAsync(StackExchange.Redis.RedisKey)">
            <summary>
            Return information about a bloom filter.
            </summary>
            <param name="key">Name of the key to return information about.</param>
            <returns>Information of the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.info"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommandsAsync.InsertAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Adds one or more items to a Bloom Filter. A filter will be created if it does not exist.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="items">One or more items to add.</param>
            <param name="capacity">(Optional) Specifies the desired capacity for the filter to be created.</param>
            <param name="error">(Optional) Specifies the error ratio of the newly created filter if it does not yet exist.</param>
            <param name="expansion">(Optional) When capacity is reached, an additional sub-filter is
            created in size of the last sub-filter multiplied by expansion.</param>
            <param name="nocreate">(Optional) <see langword="true"/> to indicates that the
            filter should not be created if it does not already exist.</param>
            <param name="nonscaling">(Optional) <see langword="true"/> toprevent the filter
            from creating additional sub-filters if initial capacity is reached.</param>
            <returns>An array of booleans. Each element is either true or false depending on whether the
            corresponding input element was newly added to the filter or may have previously existed.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.insert"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommandsAsync.LoadChunkAsync(StackExchange.Redis.RedisKey,System.Int64,System.Byte[])">
            <summary>
            Restores a filter previosly saved using SCANDUMP.
            </summary>
            <param name="key">Name of the key to restore.</param>
            <param name="iterator">Iterator value associated with data (returned by SCANDUMP).</param>
            <param name="data">Current data chunk (returned by SCANDUMP).</param>
            <returns><see langword="true"/> if executed correctly, error otherwise/></returns>
            <remarks><seealso href="https://redis.io/commands/bf.loadchunk"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommandsAsync.MAddAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Adds one or more items to the Bloom Filter. A filter will be created if it does not exist yet.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="items">One or more items to add.</param>
            <returns>An array of booleans. Each element is either true or false depending on whether the
            corresponding input element was newly added to the filter or may have previously existed.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.madd"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommandsAsync.MExistsAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Checks whether one or more items may exist in the filter or not.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="items">One or more items to check.</param>
            <returns>An array of booleans, for each item <see langword="true"/> means the item may exist in the filter,
            and <see langword="false"/> means the item may exist in the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.mexists"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommandsAsync.ReserveAsync(StackExchange.Redis.RedisKey,System.Double,System.Int64,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Creates a new Bloom Filter.
            </summary>
            <param name="key">The key under which the filter is found.</param>
            <param name="errorRate">The desired probability for false positives (value between 0 to 1).</param>
            <param name="capacity">The number of entries intended to be added to the filter.</param>
            <param name="expansion">(Optional) When capacity is reached, an additional sub-filter is
            created in size of the last sub-filter multiplied by expansion.</param>
            <param name="nonscaling">(Optional) <see langword="true"/> toprevent the filter
            from creating additional sub-filters if initial capacity is reached.</param>
            <returns><see langword="true"/> if executed correctly, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.reserve"/></remarks>
        </member>
        <member name="M:NRedisStack.IBloomCommandsAsync.ScanDumpAsync(StackExchange.Redis.RedisKey,System.Int64)">
            <summary>
            Restores a filter previosly saved using SCANDUMP.
            </summary>
            <param name="key">Name of the filter.</param>
            <param name="iterator">Iterator value; either 0 or the iterator from a previous invocation of this command.</param>
            <returns>Tuple of iterator and data.</returns>
            <remarks><seealso href="https://redis.io/commands/bf.scandump"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.ClientSetInfo(StackExchange.Redis.IDatabase,NRedisStack.Core.SetInfoAttr,System.String)">
            <summary>
            Sets information specific to the client or connection.
            </summary>
            <param name="attr">which attribute to set</param>
            <param name="value">the attribute value</param>
            <returns><see langword="true"/> if the attribute name was successfully set, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/client-setinfo/"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BZMPop(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey[],NRedisStack.Core.DataTypes.MinMaxModifier,System.Nullable{System.Int64})">
            <summary>
            The BZMPOP command.
            <p/>
            Removes and returns up to <paramref name="count"/> entries from the first non-empty sorted set in
            <paramref name="keys"/>. If none of the sets contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires. 
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <param name="keys">The keys to check.</param>
            <param name="minMaxModifier">Specify from which end of the sorted set to pop values. If set to <c>MinMaxModifier.Min</c>
            then the minimum elements will be popped, otherwise the maximum values.</param>
            <param name="count">The maximum number of records to pop out. If set to <c>null</c> then the server default
            will be used.</param>
            <returns>A collection of sorted set entries paired with their scores, together with the key they were popped
            from, or <c>null</c> if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzmpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BZMPop(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey,NRedisStack.Core.DataTypes.MinMaxModifier,System.Nullable{System.Int64})">
            <summary>
            Syntactic sugar for
            <see cref="M:NRedisStack.CoreCommands.BZMPop(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey[],NRedisStack.Core.DataTypes.MinMaxModifier,System.Nullable{System.Int64})"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <param name="key">The key to check.</param>
            <param name="minMaxModifier">Specify from which end of the sorted set to pop values. If set to <c>MinMaxModifier.Min</c>
            then the minimum elements will be popped, otherwise the maximum values.</param>
            <param name="count">The maximum number of records to pop out. If set to <c>null</c> then the server default
            will be used.</param>
            <returns>A collection of sorted set entries paired with their scores, together with the key they were popped
            from, or <c>null</c> if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzmpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BZPopMin(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)">
            <summary>
            The BZPOPMIN command.
            <p/>
            Removes and returns the entry with the smallest score from the first non-empty sorted set in
            <paramref name="keys"/>. If none of the sets contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires.
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="keys">The keys to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A sorted set entry paired with its score, together with the key it was popped from, or <c>null</c>
            if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzpopmin"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BZPopMin(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,System.Double)">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommands.BZPopMin(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="key">The key to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A sorted set entry paired with its score, together with the key it was popped from, or <c>null</c>
            if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzpopmin"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BZPopMax(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)">
            <summary>
            The BZPOPMAX command.
            <p/>
            Removes and returns the entry with the highest score from the first non-empty sorted set in
            <paramref name="keys"/>. If none of the sets contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires.
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="keys">The keys to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A sorted set entry paired with its score, together with the key it was popped from, or <c>null</c>
            if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzpopmax"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BZPopMax(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,System.Double)">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommands.BZPopMax(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="key">The key to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A sorted set entry paired with its score, together with the key it was popped from, or <c>null</c>
            if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzpopmax"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BLMPop(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey[],StackExchange.Redis.ListSide,System.Nullable{System.Int64})">
            <summary>
            The BLMPOP command.
            <p/>
            Removes and returns up to <paramref name="count"/> entries from the first non-empty list in
            <paramref name="keys"/>. If none of the lists contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires.
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <param name="keys">The keys to check.</param>
            <param name="listSide">Specify from which end of the list to pop values: left or right.</param>
            <param name="count">The maximum number of records to pop. If set to <c>null</c> then the server default
            will be used.</param>
            <returns>A collection of values, together with the key they were popped from, or <c>null</c> if the
            server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/blmpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BLMPop(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey,StackExchange.Redis.ListSide,System.Nullable{System.Int64})">
            <summary>
            Syntactic sugar for
            <see cref="M:NRedisStack.CoreCommands.BLMPop(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey[],StackExchange.Redis.ListSide,System.Nullable{System.Int64})"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <param name="key">The key to check.</param>
            <param name="listSide">Specify from which end of the list to pop values: left or right.</param>
            <param name="count">The maximum number of records to pop. If set to <c>null</c> then the server default
            will be used.</param>
            <returns>A collection of values, together with the key they were popped from, or <c>null</c> if the
            server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/blmpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BLPop(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)">
            <summary>
            The BLPOP command.
            <p/>
            Removes and returns an entry from the head (left side) of the first non-empty list in <paramref name="keys"/>.
            If none of the lists contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires.
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="keys">The keys to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A value, together with the key it was popped from, or <c>null</c> if the server timeout
            expires.</returns>
            <remarks><seealso href="https://redis.io/commands/blpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BLPop(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,System.Double)">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommands.BLPop(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="key">The key to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A value, together with the key it was popped from, or <c>null</c> if the server timeout
            expires.</returns>
            <remarks><seealso href="https://redis.io/commands/blpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BRPop(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)">
            <summary>
            The BRPOP command.
            <p/>
            Removes and returns an entry from the tail (right side) of the first non-empty list in <paramref name="keys"/>.
            If none of the lists contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires.
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="keys">The keys to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A value, together with the key it was popped from, or <c>null</c> if the server timeout
            expires.</returns>
            <remarks><seealso href="https://redis.io/commands/brpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BRPop(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,System.Double)">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommands.BRPop(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="key">The key to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A value, together with the key it was popped from, or <c>null</c> if the server timeout
            expires.</returns>
            <remarks><seealso href="https://redis.io/commands/brpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BLMove(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,StackExchange.Redis.RedisKey,StackExchange.Redis.ListSide,StackExchange.Redis.ListSide,System.Double)">
            <summary>
            The BLMOVE command.
            <p/>
            Atomically returns and removes the first or last element of the list stored at <paramref name="source"/>
            (depending on the value of <paramref name="sourceSide"/>), and pushes the element as the first or last
            element of the list stored at <paramref name="destination"/> (depending on the value of
            <paramref name="destinationSide"/>).
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="source">The key of the source list.</param>
            <param name="destination">The key of the destination list.</param>
            <param name="sourceSide">What side of the <paramref name="source"/> list to remove from.</param>
            <param name="destinationSide">What side of the <paramref name="destination"/> list to move to.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>The element being popped and pushed, or <c>null</c> if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/blmove"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.BRPopLPush(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,StackExchange.Redis.RedisKey,System.Double)">
            <summary>
            The BRPOPLPUSH command.
            <p/>
            Atomically returns and removes the last element (tail) of the list stored at source, and pushes the element
            at the first element (head) of the list stored at destination.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="source">The key of the source list.</param>
            <param name="destination">The key of the destination list.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>The element being popped and pushed, or <c>null</c> if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/rpoplpush"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.XRead(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The XREAD command.
            <para/>
            Read data from one or multiple streams, only returning entries with an ID greater than an ID provided by the caller.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="keys">Keys of the streams where to read from.</param>
            <param name="positions">The positions from which to begin reading for each stream. See
            <see cref="T:NRedisStack.Core.DataTypes.StreamSpecialIds"/> for special Ids that can be used.</param>
            <param name="count">The maximum number of messages to return from each stream.</param>
            <param name="timeoutMilliseconds">Amount of time in milliseconds to block in case all the streams are empty.
            If not provided, or set to <c>null</c> then the read does not block. If set to <c>0</c> then it blocks indefinitely.</param>
            <returns>A value of <see cref="T:NRedisStack.Core.DataTypes.RedisStreamEntries"/> for each stream, or <c>null</c> if the command times out
            on the server.</returns>
            <remarks>
            <para>This is the blocking alternative for <seealso cref="M:StackExchange.Redis.IDatabase.StreamRead(StackExchange.Redis.StreamPosition[],System.Nullable{System.Int32},StackExchange.Redis.CommandFlags)"/>.</para>
            <para><seealso href="https://redis.io/commands/xread"/></para>
            </remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.XRead(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommands.XRead(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Int32})"/>,
            where only one stream is being read from.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="key">Key of the stream where to read from.</param>
            <param name="position">The position from which to begin reading. See
            <see cref="T:NRedisStack.Core.DataTypes.StreamSpecialIds"/> for special Ids that can be used.</param>
            <param name="count">The maximum number of messages to return from each stream.</param>
            <param name="timeoutMilliseconds">Amount of time in milliseconds to block in case all the streams are empty.
            If not provided, or set to <c>null</c> then the read does not block. If set to <c>0</c> then it blocks indefinitely.</param>
            <returns>A <see cref="T:StackExchange.Redis.StreamEntry"/> list with the data read from the stream, of <c>null</c> if the command
            times out on the server.</returns>
            <remarks>
            <para>This is the blocking alternative for <seealso cref="M:StackExchange.Redis.IDatabase.StreamRead(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Nullable{System.Int32},StackExchange.Redis.CommandFlags)"/>.</para>
            <para><seealso href="https://redis.io/commands/xread"/></para>
            </remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.XReadGroup(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisKey[],StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            The XREADGROUP command.
            <para/>
            Read new or historical messages in one or several streams, for a consumer in a consumer group.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="groupName">The consumer group name.</param>
            <param name="consumerName">The name of the consumer in the consumer group.</param>
            <param name="keys">Keys of the streams where to read from.</param>
            <param name="positions">The positions from which to begin reading for each stream. See
            <see cref="T:NRedisStack.Core.DataTypes.StreamSpecialIds"/> for special Ids that can be used.</param>
            <param name="count">The maximum number of messages to return from each stream.</param>
            <param name="timeoutMilliseconds">Amount of time in milliseconds to block in case all the streams are empty.
            If not provided, or set to <c>null</c> then the read does not block. If set to <c>0</c> then it blocks indefinitely.</param>
            <param name="noAck">If set to <c>true</c> then inform the server that it should not wait for ACK for the
            messages it sends to this read call.</param>
            <returns>A value of <see cref="T:NRedisStack.Core.DataTypes.RedisStreamEntries"/> for each stream, or <c>null</c> if the command times out
            on the server.</returns>
            <remarks>
            <para>This is the blocking alternative for <seealso cref="M:StackExchange.Redis.IDatabase.StreamReadGroup(StackExchange.Redis.StreamPosition[],StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,System.Nullable{System.Int32},StackExchange.Redis.CommandFlags)"/>.</para>
            <para><seealso href="https://redis.io/commands/xreadgroup"/></para>
            </remarks>
        </member>
        <member name="M:NRedisStack.CoreCommands.XReadGroup(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommands.XReadGroup(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisKey[],StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})"/>,
            where only one stream is being read from.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="groupName">The consumer group name.</param>
            <param name="consumerName">The name of the consumer in the consumer group.</param>
            <param name="key">Key of the stream where to read from.</param>
            <param name="position">The position from which to begin reading. See
            <see cref="T:NRedisStack.Core.DataTypes.StreamSpecialIds"/> for special Ids that can be used.</param>
            <param name="count">The maximum number of messages to return from each stream.</param>
            <param name="timeoutMilliseconds">Amount of time in milliseconds to block in case all the streams are empty.
            If not provided, or set to <c>null</c> then the read does not block. If set to <c>0</c> then it blocks indefinitely.</param>
            <param name="noAck">If set to <c>true</c> then inform the server that it should not wait for ACK for the
            messages it sends to this read call.</param>
            <returns>A <see cref="T:StackExchange.Redis.StreamEntry"/> list with the data read from the stream, of <c>null</c> if the command
            times out on the server.</returns>
            <remarks>
            <para>This is the blocking alternative for <seealso cref="M:StackExchange.Redis.IDatabase.StreamReadGroup(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{System.Int32},StackExchange.Redis.CommandFlags)"/>.</para>
            <para><seealso href="https://redis.io/commands/xreadgroup"/></para>
            </remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.ClientSetInfoAsync(StackExchange.Redis.IDatabaseAsync,NRedisStack.Core.SetInfoAttr,System.String)">
            <summary>
            Sets information specific to the client or connection.
            </summary>
            <param name="attr">which attribute to set</param>
            <param name="value">the attribute value</param>
            <returns><see langword="true"/> if the attribute name was successfully set, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/client-setinfo/"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BZMPopAsync(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey[],NRedisStack.Core.DataTypes.MinMaxModifier,System.Nullable{System.Int64})">
            <summary>
            The BZMPOP command.
            <p/>
            Removes and returns up to <paramref name="count"/> entries from the first non-empty sorted set in
            <paramref name="keys"/>. If none of the sets contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires.
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <param name="keys">The keys to check.</param>
            <param name="minMaxModifier">Specify from which end of the sorted set to pop values. If set to <c>MinMaxModifier.Min</c>
            then the minimum elements will be popped, otherwise the maximum values.</param>
            <param name="count">The maximum number of records to pop out. If set to <c>null</c> then the server default
            will be used.</param>
            <returns>A collection of sorted set entries paired with their scores, together with the key they were popped
            from, or <c>null</c> if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzmpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BZMPopAsync(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey,NRedisStack.Core.DataTypes.MinMaxModifier,System.Nullable{System.Int64})">
            <summary>
            Syntactic sugar for
            <see cref="M:NRedisStack.CoreCommandsAsync.BZMPopAsync(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey[],NRedisStack.Core.DataTypes.MinMaxModifier,System.Nullable{System.Int64})"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <param name="key">The key to check.</param>
            <param name="minMaxModifier">Specify from which end of the sorted set to pop values. If set to <c>MinMaxModifier.Min</c>
            then the minimum elements will be popped, otherwise the maximum values.</param>
            <param name="count">The maximum number of records to pop out. If set to <c>null</c> then the server default
            will be used.</param>
            <returns>A collection of sorted set entries paired with their scores, together with the key they were popped
            from, or <c>null</c> if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzmpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BZPopMinAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)">
            <summary>
            The BZPOPMIN command.
            <p/>
            Removes and returns the entry with the smallest score from the first non-empty sorted set in
            <paramref name="keys"/>. If none of the sets contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires.
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="keys">The keys to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A sorted set entry paired with its score, together with the key it was popped from, or <c>null</c>
            if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzpopmin"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BZPopMinAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,System.Double)">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommandsAsync.BZPopMinAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="key">The key to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A sorted set entry paired with its score, together with the key it was popped from, or <c>null</c>
            if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzpopmin"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BZPopMaxAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)">
            <summary>
            The BZPOPMAX command.
            <p/>
            Removes and returns the entry with the highest score from the first non-empty sorted set in
            <paramref name="keys"/>. If none of the sets contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires.
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="keys">The keys to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A sorted set entry paired with its score, together with the key it was popped from, or <c>null</c>
            if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzpopmax"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BZPopMaxAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,System.Double)">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommandsAsync.BZPopMaxAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="key">The key to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A sorted set entry paired with its score, together with the key it was popped from, or <c>null</c>
            if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/bzpopmax"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BLMPopAsync(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey[],StackExchange.Redis.ListSide,System.Nullable{System.Int64})">
            <summary>
            The BLMPOP command.
            <p/>
            Removes and returns up to <paramref name="count"/> entries from the first non-empty list in
            <paramref name="keys"/>. If none of the lists contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires.
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <param name="keys">The keys to check.</param>
            <param name="listSide">Specify from which end of the list to pop values: left or right.</param>
            <param name="count">The maximum number of records to pop. If set to <c>null</c> then the server default
            will be used.</param>
            <returns>A collection of values, together with the key they were popped from, or <c>null</c> if the
            server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/blmpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BLMPopAsync(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey,StackExchange.Redis.ListSide,System.Nullable{System.Int64})">
            <summary>
            Syntactic sugar for
            <see cref="M:NRedisStack.CoreCommandsAsync.BLMPopAsync(StackExchange.Redis.IDatabase,System.Double,StackExchange.Redis.RedisKey[],StackExchange.Redis.ListSide,System.Nullable{System.Int64})"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <param name="key">The key to check.</param>
            <param name="listSide">Specify from which end of the list to pop values: left or right.</param>
            <param name="count">The maximum number of records to pop. If set to <c>null</c> then the server default
            will be used.</param>
            <returns>A collection of values, together with the key they were popped from, or <c>null</c> if the
            server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/blmpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BLPopAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)">
            <summary>
            The BLPOP command.
            <p/>
            Removes and returns an entry from the head (left side) of the first non-empty list in <paramref name="keys"/>.
            If none of the lists contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires.
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="keys">The keys to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A value, together with the key it was popped from, or <c>null</c> if the server timeout
            expires.</returns>
            <remarks><seealso href="https://redis.io/commands/blpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BLPopAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,System.Double)">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommandsAsync.BLPopAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="key">The key to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A value, together with the key it was popped from, or <c>null</c> if the server timeout
            expires.</returns>
            <remarks><seealso href="https://redis.io/commands/blpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BRPopAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)">
            <summary>
            The BRPOP command.
            <p/>
            Removes and returns an entry from the tail (right side) of the first non-empty list in <paramref name="keys"/>.
            If none of the lists contain elements, the call blocks on the server until elements
            become available, or the given <paramref name="timeout"/> expires. A <paramref name="timeout"/> of <c>0</c>
            means to wait indefinitely server-side. Returns <c>null</c> if the server timeout expires.
            <p/>
            When using this, pay attention to the timeout configured in the client, on the
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/>, which by default can be too small:
            <code>
            ConfigurationOptions configurationOptions = new ConfigurationOptions();
            configurationOptions.SyncTimeout = 120000; // set a meaningful value here
            configurationOptions.EndPoints.Add("localhost");
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);
            </code>
            If the connection multiplexer timeout expires in the client, a <c>StackExchange.Redis.RedisTimeoutException</c>
            is thrown.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="keys">The keys to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A value, together with the key it was popped from, or <c>null</c> if the server timeout
            expires.</returns>
            <remarks><seealso href="https://redis.io/commands/brpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BRPopAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,System.Double)">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommandsAsync.BRPopAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],System.Double)"/>,
            where only one key is used.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="key">The key to check.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>A value, together with the key it was popped from, or <c>null</c> if the server timeout
            expires.</returns>
            <remarks><seealso href="https://redis.io/commands/brpop"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BLMoveAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,StackExchange.Redis.RedisKey,StackExchange.Redis.ListSide,StackExchange.Redis.ListSide,System.Double)">
            <summary>
            The BLMOVE command.
            <p/>
            Atomically returns and removes the first or last element of the list stored at <paramref name="source"/>
            (depending on the value of <paramref name="sourceSide"/>), and pushes the element as the first or last
            element of the list stored at <paramref name="destination"/> (depending on the value of
            <paramref name="destinationSide"/>).
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="source">The key of the source list.</param>
            <param name="destination">The key of the destination list.</param>
            <param name="sourceSide">What side of the <paramref name="source"/> list to remove from.</param>
            <param name="destinationSide">What side of the <paramref name="destination"/> list to move to.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>The element being popped and pushed, or <c>null</c> if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/blmove"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.BRPopLPushAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,StackExchange.Redis.RedisKey,System.Double)">
            <summary>
            The BRPOPLPUSH command.
            <p/>
            Atomically returns and removes the last element (tail) of the list stored at source, and pushes the element
            at the first element (head) of the list stored at destination.
            <p/>
            This is an extension method added to the <see cref="T:StackExchange.Redis.IDatabase"/> class, for convenience.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="source">The key of the source list.</param>
            <param name="destination">The key of the destination list.</param>
            <param name="timeout">Server-side timeout for the wait. A value of <c>0</c> means to wait indefinitely.</param>
            <returns>The element being popped and pushed, or <c>null</c> if the server timeout expires.</returns>
            <remarks><seealso href="https://redis.io/commands/rpoplpush"/></remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.XReadAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The XREAD command.
            <para/>
            Read data from one or multiple streams, only returning entries with an ID greater than an ID provided by the caller.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="keys">Keys of the streams where to read from.</param>
            <param name="positions">The positions from which to begin reading for each stream. See
            <see cref="T:NRedisStack.Core.DataTypes.StreamSpecialIds"/> for special Ids that can be used.</param>
            <param name="count">The maximum number of messages to return from each stream.</param>
            <param name="timeoutMilliseconds">Amount of time in milliseconds to block in case all the streams are empty.
            If not provided, or set to <c>null</c> then the read does not block. If set to <c>0</c> then it blocks indefinitely.</param>
            <returns>A value of <see cref="T:NRedisStack.Core.DataTypes.RedisStreamEntries"/> for each stream, or <c>null</c> if the command times out
            on the server.</returns>
            <remarks>
            <para>This is the blocking alternative for <seealso cref="M:StackExchange.Redis.IDatabase.StreamRead(StackExchange.Redis.StreamPosition[],System.Nullable{System.Int32},StackExchange.Redis.CommandFlags)"/>.</para>
            <para><seealso href="https://redis.io/commands/xread"/></para>
            </remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.XReadAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommandsAsync.XReadAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisKey[],StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Int32})"/>,
            where only one stream is being read from.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="key">Key of the stream where to read from.</param>
            <param name="position">The position from which to begin reading. See
            <see cref="T:NRedisStack.Core.DataTypes.StreamSpecialIds"/> for special Ids that can be used.</param>
            <param name="count">The maximum number of messages to return from each stream.</param>
            <param name="timeoutMilliseconds">Amount of time in milliseconds to block in case all the streams are empty.
            If not provided, or set to <c>null</c> then the read does not block. If set to <c>0</c> then it blocks indefinitely.</param>
            <returns>A <see cref="T:StackExchange.Redis.StreamEntry"/> list with the data read from the stream, of <c>null</c> if the command
            times out on the server.</returns>
            <remarks>
            <para>This is the blocking alternative for <seealso cref="M:StackExchange.Redis.IDatabase.StreamRead(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Nullable{System.Int32},StackExchange.Redis.CommandFlags)"/>.</para>
            <para><seealso href="https://redis.io/commands/xread"/></para>
            </remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.XReadGroupAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisKey[],StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            The XREADGROUP command.
            <para/>
            Read new or historical messages in one or several streams, for a consumer in a consumer group.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="groupName">The consumer group name.</param>
            <param name="consumerName">The name of the consumer in the consumer group.</param>
            <param name="keys">Keys of the streams where to read from.</param>
            <param name="positions">The positions from which to begin reading for each stream. See
            <see cref="T:NRedisStack.Core.DataTypes.StreamSpecialIds"/> for special Ids that can be used.</param>
            <param name="count">The maximum number of messages to return from each stream.</param>
            <param name="timeoutMilliseconds">Amount of time in milliseconds to block in case all the streams are empty.
            If not provided, or set to <c>null</c> then the read does not block. If set to <c>0</c> then it blocks indefinitely.</param>
            <param name="noAck">If set to <c>true</c> then inform the server that it should not wait for ACK for the
            messages it sends to this read call.</param>
            <returns>A value of <see cref="T:NRedisStack.Core.DataTypes.RedisStreamEntries"/> for each stream, or <c>null</c> if the command times out
            on the server.</returns>
            <remarks>
            <para>This is the blocking alternative for <seealso cref="M:StackExchange.Redis.IDatabase.StreamReadGroup(StackExchange.Redis.StreamPosition[],StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,System.Nullable{System.Int32},StackExchange.Redis.CommandFlags)"/>.</para>
            <para><seealso href="https://redis.io/commands/xreadgroup"/></para>
            </remarks>
        </member>
        <member name="M:NRedisStack.CoreCommandsAsync.XReadGroupAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Syntactic sugar for <see cref="M:NRedisStack.CoreCommandsAsync.XReadGroupAsync(StackExchange.Redis.IDatabase,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisKey[],StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})"/>,
            where only one stream is being read from.
            </summary>
            <param name="db">The <see cref="T:StackExchange.Redis.IDatabase"/> class where this extension method is applied.</param>
            <param name="groupName">The consumer group name.</param>
            <param name="consumerName">The name of the consumer in the consumer group.</param>
            <param name="key">Key of the stream where to read from.</param>
            <param name="position">The position from which to begin reading. See
            <see cref="T:NRedisStack.Core.DataTypes.StreamSpecialIds"/> for special Ids that can be used.</param>
            <param name="count">The maximum number of messages to return from each stream.</param>
            <param name="timeoutMilliseconds">Amount of time in milliseconds to block in case all the streams are empty.
            If not provided, or set to <c>null</c> then the read does not block. If set to <c>0</c> then it blocks indefinitely.</param>
            <param name="noAck">If set to <c>true</c> then inform the server that it should not wait for ACK for the
            messages it sends to this read call.</param>
            <returns>A <see cref="T:StackExchange.Redis.StreamEntry"/> list with the data read from the stream, of <c>null</c> if the command
            times out on the server.</returns>
            <remarks>
            <para>This is the blocking alternative for <seealso cref="M:StackExchange.Redis.IDatabase.StreamReadGroup(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{System.Int32},StackExchange.Redis.CommandFlags)"/>.</para>
            <para><seealso href="https://redis.io/commands/xreadgroup"/></para>
            </remarks>
        </member>
        <member name="T:NRedisStack.Core.DataTypes.MinMaxModifier">
            <summary>
            Modifier that can be used for sorted set commands, where a MIN/MAX argument is expected by the Redis server.
            </summary>
        </member>
        <member name="F:NRedisStack.Core.DataTypes.MinMaxModifier.Min">
            <summary>
            Maps to the <c>MIN</c> argument on the Redis server.
            </summary>
        </member>
        <member name="F:NRedisStack.Core.DataTypes.MinMaxModifier.Max">
            <summary>
            Maps to the <c>MAX</c> argument on the Redis server.
            </summary>
        </member>
        <member name="T:NRedisStack.Core.DataTypes.MinMaxModifierExtensions">
            <summary>
            Conversion methods from/to other common data types.
            </summary>
        </member>
        <member name="M:NRedisStack.Core.DataTypes.MinMaxModifierExtensions.ToMinMax(StackExchange.Redis.Order)">
            <summary>
            Convert from <see cref="T:StackExchange.Redis.Order"/> to <see cref="T:NRedisStack.Core.DataTypes.MinMaxModifier"/>.
            </summary>
        </member>
        <member name="T:NRedisStack.Core.DataTypes.RedisStreamEntries">
            <summary>
            Holds the key and the entries for a Redis Stream, as returned by, for example, the XREAD or the XREADGROUP commands.
            </summary>
        </member>
        <member name="P:NRedisStack.Core.DataTypes.RedisStreamEntries.Key">
            <summary>
            The key for the stream.
            </summary>
        </member>
        <member name="P:NRedisStack.Core.DataTypes.RedisStreamEntries.Entries">
            <summary>
            An array of entries contained within the stream.
            </summary>
        </member>
        <member name="T:NRedisStack.Core.DataTypes.RedisValueWithScore">
            <summary>
            Holds a <see cref="T:StackExchange.Redis.RedisValue"/> with an associated score.
            Used when working with sorted sets.
            </summary>
        </member>
        <member name="M:NRedisStack.Core.DataTypes.RedisValueWithScore.#ctor(StackExchange.Redis.RedisValue,System.Double)">
            <summary>
            Pair a <see cref="T:StackExchange.Redis.RedisValue"/> with a numeric score.
            </summary>
        </member>
        <member name="P:NRedisStack.Core.DataTypes.RedisValueWithScore.Value">
            <summary>
            The value of an item stored in a sorted set. For example, in the Redis command
            <c>ZADD my-set 5.1 my-value</c>, the value is <c>my-value</c>.
            </summary>
        </member>
        <member name="P:NRedisStack.Core.DataTypes.RedisValueWithScore.Score">
            <summary>
            The score of an item stored in a sorted set. For example, in the Redis command
            <c>ZADD my-set 5.1 my-value</c>, the score is <c>5.1</c>.
            </summary>
        </member>
        <member name="T:NRedisStack.Core.DataTypes.StreamSpecialIds">
            <summary>
            Constants for special stream Ids, to be used, for example, with the XREAD and XREADGROUP commands
            </summary>
        </member>
        <member name="F:NRedisStack.Core.DataTypes.StreamSpecialIds.AllMessagesId">
            <summary>
            Smallest incomplete ID, can be used for reading from the very first message in a stream.
            </summary>
        </member>
        <member name="F:NRedisStack.Core.DataTypes.StreamSpecialIds.NewMessagesId">
            <summary>
            For receiving only new messages that arrive after blocking on a read.
            </summary>
        </member>
        <member name="F:NRedisStack.Core.DataTypes.StreamSpecialIds.UndeliveredMessagesId">
            <summary>
            For receiving only messages that were never delivered to any other consumer.
            </summary>
        </member>
        <member name="F:NRedisStack.Core.SetInfoAttr.LibraryName">
            <summary>
            meant to hold the name of the client library that's in use.
            </summary>
        </member>
        <member name="F:NRedisStack.Core.SetInfoAttr.LibraryVersion">
            <summary>
            meant to hold the client library's version.
            </summary>
        </member>
        <member name="T:NRedisStack.Core.Literals.RedisCoreCommands">
            <summary>
            Redis Core command literals
            </summary>
        </member>
        <member name="M:NRedisStack.CmsCommands.IncrBy(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommands.IncrBy(StackExchange.Redis.RedisKey,System.Tuple{StackExchange.Redis.RedisValue,System.Int64}[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommands.Info(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommands.InitByDim(StackExchange.Redis.RedisKey,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommands.InitByProb(StackExchange.Redis.RedisKey,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommands.Merge(StackExchange.Redis.RedisValue,System.Int64,StackExchange.Redis.RedisValue[],System.Int64[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommands.Query(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommandsAsync.IncrByAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommandsAsync.IncrByAsync(StackExchange.Redis.RedisKey,System.Tuple{StackExchange.Redis.RedisValue,System.Int64}[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommandsAsync.InfoAsync(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommandsAsync.InitByDimAsync(StackExchange.Redis.RedisKey,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommandsAsync.InitByProbAsync(StackExchange.Redis.RedisKey,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommandsAsync.MergeAsync(StackExchange.Redis.RedisValue,System.Int64,StackExchange.Redis.RedisValue[],System.Int64[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CmsCommandsAsync.QueryAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="T:NRedisStack.CountMinSketch.DataTypes.CmsInformation">
            <summary>
            This class represents the response for CMS.INFO command.
            This object has Read-only properties and cannot be generated outside a CMS.INFO response.
            </summary>
        </member>
        <member name="M:NRedisStack.ICmsCommands.IncrBy(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Int64)">
            <summary>
            Increases the count of item by increment.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="item">The item which counter is to be increased.</param>
            <param name="increment">Amount by which the item counter is to be increased.</param>
            <returns>Count of each item after increment.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.incrby"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommands.IncrBy(StackExchange.Redis.RedisKey,System.Tuple{StackExchange.Redis.RedisValue,System.Int64}[])">
            <summary>
            Increases the count of item by increment.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="itemIncrements">Tuple of The items which counter is to be increased
            and the Amount by which the item counter is to be increased.</param>
            <returns>Count of each item after increment.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.incrby"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommands.Info(StackExchange.Redis.RedisKey)">
            <summary>
            Return information about a sketch.
            </summary>
            <param name="key">Name of the key to return information about.</param>
            <returns>Information of the sketch.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.info"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommands.InitByDim(StackExchange.Redis.RedisKey,System.Int64,System.Int64)">
            <summary>
            Initializes a Count-Min Sketch to dimensions specified by user.
            </summary>
            <param name="key">TThe name of the sketch.</param>
            <param name="width">Number of counters in each array. Reduces the error size.</param>
            <param name="depth">Number of counter-arrays. Reduces the probability for an error
            of a certain size (percentage of total count).</param>
            <returns><see langword="true"/> if if executed correctly, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.initbydim"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommands.InitByProb(StackExchange.Redis.RedisKey,System.Double,System.Double)">
            <summary>
            Initializes a Count-Min Sketch to accommodate requested tolerances.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="error">Estimate size of error.</param>
            <param name="probability">The desired probability for inflated count.</param>
            <returns><see langword="true"/> if if executed correctly, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.initbyprob"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommands.Merge(StackExchange.Redis.RedisValue,System.Int64,StackExchange.Redis.RedisValue[],System.Int64[])">
            <summary>
            Merges several sketches into one sketch.
            </summary>
            <param name="destination">The name of destination sketch. Must be initialized</param>
            <param name="numKeys">Number of sketches to be merged.</param>
            <param name="source">Names of source sketches to be merged.</param>
            <param name="weight">Multiple of each sketch. Default = 1.</param>
            <returns><see langword="true"/> if if executed correctly, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.merge"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommands.Query(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Returns the count for one or more items in a sketch.
            </summary>
            <param name="key">The name of the sketch</param>
            <param name="items">One or more items for which to return the count.</param>
            <returns>Array with a min-count of each of the items in the sketch</returns>
            <remarks><seealso href="https://redis.io/commands/cms.query"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommandsAsync.IncrByAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Int64)">
            <summary>
            Increases the count of item by increment.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="item">The item which counter is to be increased.</param>
            <param name="increment">Amount by which the item counter is to be increased.</param>
            <returns>Count of each item after increment.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.incrby"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommandsAsync.IncrByAsync(StackExchange.Redis.RedisKey,System.Tuple{StackExchange.Redis.RedisValue,System.Int64}[])">
            <summary>
            Increases the count of item by increment.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="itemIncrements">Tuple of The items which counter is to be increased
            and the Amount by which the item counter is to be increased.</param>
            <returns>Count of each item after increment.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.incrby"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommandsAsync.InfoAsync(StackExchange.Redis.RedisKey)">
            <summary>
            Return information about a sketch.
            </summary>
            <param name="key">Name of the key to return information about.</param>
            <returns>Information of the sketch.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.info"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommandsAsync.InitByDimAsync(StackExchange.Redis.RedisKey,System.Int64,System.Int64)">
            <summary>
            Initializes a Count-Min Sketch to dimensions specified by user.
            </summary>
            <param name="key">TThe name of the sketch.</param>
            <param name="width">Number of counters in each array. Reduces the error size.</param>
            <param name="depth">Number of counter-arrays. Reduces the probability for an error
            of a certain size (percentage of total count).</param>
            <returns><see langword="true"/> if if executed correctly, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.initbydim"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommandsAsync.InitByProbAsync(StackExchange.Redis.RedisKey,System.Double,System.Double)">
            <summary>
            Initializes a Count-Min Sketch to accommodate requested tolerances.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="error">Estimate size of error.</param>
            <param name="probability">The desired probability for inflated count.</param>
            <returns><see langword="true"/> if if executed correctly, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.initbyprob"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommandsAsync.MergeAsync(StackExchange.Redis.RedisValue,System.Int64,StackExchange.Redis.RedisValue[],System.Int64[])">
            <summary>
            Merges several sketches into one sketch.
            </summary>
            <param name="destination">The name of destination sketch. Must be initialized</param>
            <param name="numKeys">Number of sketches to be merged.</param>
            <param name="source">Names of source sketches to be merged.</param>
            <param name="weight">Multiple of each sketch. Default = 1.</param>
            <returns><see langword="true"/> if if executed correctly, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cms.merge"/></remarks>
        </member>
        <member name="M:NRedisStack.ICmsCommandsAsync.QueryAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Returns the count for one or more items in a sketch.
            </summary>
            <param name="key">The name of the sketch</param>
            <param name="items">One or more items for which to return the count.</param>
            <returns>Array with a min-count of each of the items in the sketch</returns>
            <remarks><seealso href="https://redis.io/commands/cms.query"/></remarks>
        </member>
        <member name="M:NRedisStack.CuckooCommands.Add(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommands.AddNX(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommands.Count(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommands.Del(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommands.Exists(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommands.Info(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommands.Insert(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommands.InsertNX(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommands.LoadChunk(StackExchange.Redis.RedisKey,System.Int64,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommands.MExists(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommands.Reserve(StackExchange.Redis.RedisKey,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommands.ScanDump(StackExchange.Redis.RedisKey,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.AddAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.AddNXAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.CountAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.DelAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.ExistsAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.InfoAsync(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.InsertAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.InsertNXAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.LoadChunkAsync(StackExchange.Redis.RedisKey,System.Int64,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.MExistsAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.ReserveAsync(StackExchange.Redis.RedisKey,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.CuckooCommandsAsync.ScanDumpAsync(StackExchange.Redis.RedisKey,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:NRedisStack.CuckooFilter.DataTypes.CuckooInformation">
            <summary>
            This class represents the response for CF.INFO command.
            This object has Read-only properties and cannot be generated outside a CF.INFO response.
            </summary>
        </member>
        <member name="M:NRedisStack.ICuckooCommands.Add(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Adds an item to a Cuckoo Filter.
            </summary>
            <param name="key">The key under which the filter is found.</param>
            <param name="item">The item to add.</param>
            <returns><see langword="true"/> if the item did not exist in the filter, <see langword="false"/> otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.add"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommands.AddNX(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Adds an item to a Cuckoo Filter if the item did not exist previously.
            </summary>
            <param name="key">The key under which the filter is found.</param>
            <param name="item">The item to add.</param>
            <returns><see langword="true"/> if the item did not exist in the filter, <see langword="false"/> otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.addnx"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommands.Count(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Returns the number of times an item may be in the filter.
            </summary>
            <param name="key">The name of the filter</param>
            <param name="item">The item to count.</param>
            <returns>the count of possible matching copies of the item in the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.count"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommands.Del(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Deletes an item from the Cuckoo Filter.
            </summary>
            <param name="key">The name of the filter</param>
            <param name="item">The item to delete from the filter.</param>
            <returns>see langword="true"/> if the item has been deleted from the filter, <see langword="false"/> otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.del"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommands.Exists(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Checks whether an item exist in the Cuckoo Filter or not.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="item">The item to check for.</param>
            <returns><see langword="true"/> means the item may exist in the filter,
            and <see langword="false"/> means it does not exist in the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.exists"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommands.Info(StackExchange.Redis.RedisKey)">
            <summary>
            Return information about a Cuckoo filter.
            </summary>
            <param name="key">Name of the key to return information about.</param>
            <returns>Information of the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.info"/></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.ICuckooCommands.Insert(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.ICuckooCommands.InsertNX(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Boolean)" -->
        <member name="M:NRedisStack.ICuckooCommands.LoadChunk(StackExchange.Redis.RedisKey,System.Int64,System.Byte[])">
            <summary>
            Restores a filter previosly saved using SCANDUMP.
            </summary>
            <param name="key">Name of the key to restore.</param>
            <param name="iterator">Iterator value associated with data (returned by SCANDUMP).</param>
            <param name="data">Current data chunk (returned by SCANDUMP).</param>
            <returns>Array with information of the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.loadchunk"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommands.MExists(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Checks whether one or more items may exist in the a Cuckoo Filter.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="items">One or more items to check.</param>
            <returns>An array of booleans, for each item <see langword="true"/> means the item may exist in the filter,
            and <see langword="false"/> means the item may exist in the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.mexists"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommands.Reserve(StackExchange.Redis.RedisKey,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new Cuckoo Filter.
            </summary>
            <param name="key">The key under which the filter is found.</param>
            <param name="capacity">The number of entries intended to be added to the filter.</param>
            <param name="bucketSize">Number of items in each bucket.</param>
            <param name="maxIterations">Number of attempts to swap items between buckets before
            declaring filter as full and creating an additional filter.</param>
            <param name="expansion">(Optional) When capacity is reached, an additional sub-filter is
            created in size of the last sub-filter multiplied by expansion.</param>
            <returns><see langword="true"/> if executed correctly, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.reserve"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommands.ScanDump(StackExchange.Redis.RedisKey,System.Int64)">
            <summary>
            Begins an incremental save of the Cuckoo Filter.
            </summary>
            <param name="key">Name of the filter.</param>
            <param name="iterator">Iterator value; either 0 or the iterator from a previous invocation of this command.</param>
            <returns>Tuple of iterator and data.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.scandump"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommandsAsync.AddAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Adds an item to a Cuckoo Filter.
            </summary>
            <param name="key">The key under which the filter is found.</param>
            <param name="item">The item to add.</param>
            <returns><see langword="true"/> if the item did not exist in the filter, <see langword="false"/> otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.add"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommandsAsync.AddNXAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Adds an item to a Cuckoo Filter if the item did not exist previously.
            </summary>
            <param name="key">The key under which the filter is found.</param>
            <param name="item">The item to add.</param>
            <returns><see langword="true"/> if the item did not exist in the filter, <see langword="false"/> otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.addnx"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommandsAsync.CountAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Returns the number of times an item may be in the filter.
            </summary>
            <param name="key">The name of the filter</param>
            <param name="item">The item to count.</param>
            <returns>the count of possible matching copies of the item in the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.count"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommandsAsync.DelAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Deletes an item from the Cuckoo Filter.
            </summary>
            <param name="key">The name of the filter</param>
            <param name="item">The item to delete from the filter.</param>
            <returns>see langword="true"/> if the item has been deleted from the filter, <see langword="false"/> otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.del"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommandsAsync.ExistsAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Checks whether an item exist in the Cuckoo Filter or not.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="item">The item to check for.</param>
            <returns><see langword="true"/> means the item may exist in the filter,
            and <see langword="false"/> means it does not exist in the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.exists"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommandsAsync.InfoAsync(StackExchange.Redis.RedisKey)">
            <summary>
            Return information about a Cuckoo filter.
            </summary>
            <param name="key">Name of the key to return information about.</param>
            <returns>Information of the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.info"/></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.ICuckooCommandsAsync.InsertAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.ICuckooCommandsAsync.InsertNXAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[],System.Nullable{System.Int32},System.Boolean)" -->
        <member name="M:NRedisStack.ICuckooCommandsAsync.LoadChunkAsync(StackExchange.Redis.RedisKey,System.Int64,System.Byte[])">
            <summary>
            Restores a filter previosly saved using SCANDUMP.
            </summary>
            <param name="key">Name of the key to restore.</param>
            <param name="iterator">Iterator value associated with data (returned by SCANDUMP).</param>
            <param name="data">Current data chunk (returned by SCANDUMP).</param>
            <returns>Array with information of the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.loadchunk"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommandsAsync.MExistsAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Checks whether one or more items may exist in the a Cuckoo Filter.
            </summary>
            <param name="key">The name of the filter.</param>
            <param name="items">One or more items to check.</param>
            <returns>An array of booleans, for each item <see langword="true"/> means the item may exist in the filter,
            and <see langword="false"/> means the item may exist in the filter.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.mexists"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommandsAsync.ReserveAsync(StackExchange.Redis.RedisKey,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new Cuckoo Filter.
            </summary>
            <param name="key">The key under which the filter is found.</param>
            <param name="capacity">The number of entries intended to be added to the filter.</param>
            <param name="bucketSize">Number of items in each bucket.</param>
            <param name="maxIterations">Number of attempts to swap items between buckets before
            declaring filter as full and creating an additional filter.</param>
            <param name="expansion">(Optional) When capacity is reached, an additional sub-filter is
            created in size of the last sub-filter multiplied by expansion.</param>
            <returns><see langword="true"/> if executed correctly, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.reserve"/></remarks>
        </member>
        <member name="M:NRedisStack.ICuckooCommandsAsync.ScanDumpAsync(StackExchange.Redis.RedisKey,System.Int64)">
            <summary>
            Begins an incremental save of the Cuckoo Filter.
            </summary>
            <param name="key">Name of the filter.</param>
            <param name="iterator">Iterator value; either 0 or the iterator from a previous invocation of this command.</param>
            <returns>Tuple of iterator and data.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.scandump"/></remarks>
        </member>
        <member name="M:NRedisStack.GearsCommands.TFunctionLoad(StackExchange.Redis.IDatabase,System.String,System.Boolean,System.String)">
            <summary>
            Load a new library to RedisGears.
            </summary>
            <param name="libraryCode">the library code.</param>
            <param name="config">a string representation of a JSON object
            that will be provided to the library on load time,
            for more information refer to
            <see href="https://github.com/RedisGears/RedisGears/blob/master/docs/function_advance_topics.md#library-configuration">
            library configuration</see></param>
            <param name="replace">an optional argument, instructs RedisGears to replace the function if its already exists.</param>
            <returns><see langword="true"/> if everything was done correctly, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/tfunction-load/"/></remarks> //TODO: check this link when it's available
        </member>
        <member name="M:NRedisStack.GearsCommands.TFunctionDelete(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            Delete a library from RedisGears.
            </summary>
            <param name="libraryName">the name of the library to delete.</param>
            <returns><see langword="true"/> if the library was deleted successfully, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/tfunction-delete/"/></remarks> //TODO: check this link when it's available
        </member>
        <member name="M:NRedisStack.GearsCommands.TFunctionList(StackExchange.Redis.IDatabase,System.Boolean,System.Int32,System.String)">
            <summary>
            List the functions with additional information about each function.
            </summary>
            <param name="withCode">Show libraries code.</param>
            <param name="verbose">output verbosity level, higher number will increase verbosity level</param>
            <param name="libraryName">specifying a library name (can be used
            multiple times to show multiple libraries in a single command)</param>
            <returns>Information about the requested libraries.</returns>
            <remarks><seealso href="https://redis.io/commands/tfunction-list/"/></remarks> //TODO: check this link when it's available
        </member>
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.GearsCommands.TFCall_(StackExchange.Redis.IDatabase,System.String,System.String,System.String[],System.String[])" -->
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.GearsCommands.TFCallAsync_(StackExchange.Redis.IDatabase,System.String,System.String,System.String[],System.String[])" -->
        <member name="M:NRedisStack.GearsCommandsAsync.TFunctionLoadAsync(StackExchange.Redis.IDatabase,System.String,System.String,System.Boolean)">
            <summary>
            Load a new library to RedisGears.
            </summary>
            <param name="libraryCode">the library code.</param>
            <param name="config">a string representation of a JSON object
            that will be provided to the library on load time,
            for more information refer to
            <see href="https://github.com/RedisGears/RedisGears/blob/master/docs/function_advance_topics.md#library-configuration">
            library configuration</see></param>
            <param name="replace">an optional argument, instructs RedisGears to replace the function if its already exists.</param>
            <returns><see langword="true"/> if everything was done correctly, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/"/></remarks> //TODO: add link to the command when it's available
        </member>
        <member name="M:NRedisStack.GearsCommandsAsync.TFunctionDeleteAsync(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            Delete a library from RedisGears.
            </summary>
            <param name="libraryName">the name of the library to delete.</param>
            <returns><see langword="true"/> if the library was deleted successfully, Error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/"/></remarks> //TODO: add link to the command when it's available
        </member>
        <member name="M:NRedisStack.GearsCommandsAsync.TFunctionListAsync(StackExchange.Redis.IDatabase,System.Boolean,System.Int32,System.String)">
            <summary>
            List the functions with additional information about each function.
            </summary>
            <param name="withCode">Show libraries code.</param>
            <param name="verbose">output verbosity level, higher number will increase verbosity level</param>
            <param name="libraryName">specifying a library name (can be used
            multiple times to show multiple libraries in a single command)</param>
            <returns>Information about the requested libraries.</returns>
            <remarks><seealso href="https://redis.io/commands/"/></remarks> //TODO: add link to the command when it's available
        </member>
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.GearsCommandsAsync.TFCall_Async(StackExchange.Redis.IDatabase,System.String,System.String,System.String[],System.String[])" -->
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.GearsCommandsAsync.TFCallAsync_Async(StackExchange.Redis.IDatabase,System.String,System.String,System.String[],System.String[])" -->
        <member name="T:NRedisStack.Gears.Literals.RG">
            <summary>
            RedisGears command literals
            </summary>
        </member>
        <member name="T:NRedisStack.Graph.DataTypes.Edge">
            <summary>
            A class reprenting an edge (graph entity). In addition to the base class properties, an edge shows its source,
            destination, and relationship type.
            </summary>
        </member>
        <member name="P:NRedisStack.Graph.DataTypes.Edge.RelationshipType">
            <summary>
            The relationship type.
            </summary>
            <value></value>
        </member>
        <member name="P:NRedisStack.Graph.DataTypes.Edge.Source">
            <summary>
            The ID of the source node.
            </summary>
            <value></value>
        </member>
        <member name="P:NRedisStack.Graph.DataTypes.Edge.Destination">
            <summary>
            The ID of the desination node.
            </summary>
            <value></value>
        </member>
        <member name="M:NRedisStack.Graph.DataTypes.Edge.Equals(System.Object)">
            <summary>
            Overriden from the base `Equals` implementation. In addition to the expected behavior of checking
            reference equality, we'll also fall back and check to see if the: Source, Destination, and RelationshipType
            are equal.
            </summary>
            <param name="obj">Another `Edge` object to compare to.</param>
            <returns>True if the two instances are equal, false if not.</returns>
        </member>
        <member name="M:NRedisStack.Graph.DataTypes.Edge.GetHashCode">
            <summary>
            Overriden from base to compute a deterministic hashcode based on RelationshipType, Source, and Destination.
            </summary>
            <returns>An integer representing the hash code for this instance.</returns>
        </member>
        <member name="M:NRedisStack.Graph.DataTypes.Edge.ToString">
            <summary>
            Override from base to emit a string that contains: RelationshipType, Source, Destination, Id, and PropertyMap.
            </summary>
            <returns>A string containing a description of the Edge containing a RelationshipType, Source, Destination, Id, and PropertyMap.</returns>
        </member>
        <member name="T:NRedisStack.Graph.DataTypes.GraphEntity">
            <summary>
            An abstract representation of a graph entity.
            A graph entity has an ID and a set of properties. The properties are mapped and accessed by their names.
            </summary>
        </member>
        <member name="M:NRedisStack.Graph.DataTypes.GraphEntity.Equals(System.Object)">
            <summary>
            Overriden Equals that considers the equality of the entity ID as well as the equality of the
            properties that each entity has.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.Graph.DataTypes.GraphEntity.GetHashCode">
            <summary>
            Overriden GetHashCode that computes a deterministic hash code based on the value of the ID
            and the name/value of each of the associated properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRedisStack.Graph.DataTypes.Node">
            <summary>
            A class representing a node (graph entity). In addition to the base class ID and properties, a node has labels.
            </summary>
        </member>
        <member name="M:NRedisStack.Graph.DataTypes.Node.Equals(System.Object)">
            <summary>
            Overriden member that checks to see if the names of the labels of a node are equal
            (in addition to base `Equals` functionality).
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.Graph.DataTypes.Node.GetHashCode">
            <summary>
            Overridden member that computes a hash code based on the base `GetHashCode` implementation
            as well as the hash codes of all labels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.Graph.DataTypes.Node.ToString">
            <summary>
            Overridden member that emits a string containing the labels, ID, and property map of a node.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRedisStack.Graph.DataTypes.Path">
            <summary>
            This class represents a path in the graph.
            </summary>
        </member>
        <member name="M:NRedisStack.Graph.DataTypes.Path.Equals(System.Object)">
            <summary>
            Overriden `Equals` method that will consider the equality of the Nodes and Edges between two paths.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.Graph.DataTypes.Path.GetHashCode">
            <summary>
            Overridden `GetHashCode` method that will compute a hash code using the hash code of each node and edge on
            the path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.Graph.DataTypes.Path.ToString">
            <summary>
            Overridden `ToString` method that will emit a string based on the string values of the nodes and edges
            on the path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.Graph.GraphCacheList.#ctor(System.String,System.String,NRedisStack.GraphCommands)">
            <summary>
            Constructs a <see cref="T:NRedisStack.Graph.GraphCacheList"/> for providing cached information about the graph.
            </summary>
            <param name="graphName">The name of the graph to cache information for.</param>
            <param name="procedure">The saved procedure to call to populate cache. Must be a `read` procedure.</param>
            <param name="redisGraph">The graph used for the calling the <paramref name="procedure"/>.</param>
        </member>
        <member name="M:NRedisStack.Graph.GraphCacheList.#ctor(System.String,System.String,NRedisStack.GraphCommandsAsync)">
            <summary>
            Constructs a <see cref="T:NRedisStack.Graph.GraphCacheList"/> for providing cached information about the graph.
            </summary>
            <param name="graphName">The name of the graph to cache information for.</param>
            <param name="procedure">The saved procedure to call to populate cache. Must be a `read` procedure.</param>
            <param name="redisGraph">The graph used for the calling the <paramref name="procedure"/>.</param>
        </member>
        <member name="T:NRedisStack.Graph.Header">
            <summary>
            Query response header interface. Represents the response schema (column names and types).
            </summary>
        </member>
        <member name="T:NRedisStack.Graph.Header.ResultSetColumnTypes">
            <summary>
            The expected column types.
            </summary>
        </member>
        <member name="P:NRedisStack.Graph.Header.SchemaTypes">
            <summary>
            Collection of the schema types present in the header.
            </summary>
        </member>
        <member name="P:NRedisStack.Graph.Header.SchemaNames">
            <summary>
            Collection of the schema names present in the header.
            </summary>
            <value></value>
        </member>
        <member name="T:NRedisStack.Graph.ProcedureMode">
            <summary>
            Defines the mode of a saved procedure.
            </summary>
        </member>
        <member name="T:NRedisStack.Graph.Record">
            <summary>
            Container for RedisGraph result values.
            </summary>
        </member>
        <member name="M:NRedisStack.Graph.Record.GetValue``1(System.Int32)">
            <summary>
            Get a value by index.
            </summary>
            <param name="index">The index of the value you want to get.</param>
            <typeparam name="T">The type of the value at the index that you want to get.</typeparam>
            <returns>The value at the index that you specified.</returns>
        </member>
        <member name="M:NRedisStack.Graph.Record.GetValue``1(System.String)">
            <summary>
            Get a value by key name.
            </summary>
            <param name="key">The key of the value you want to get.</param>
            <typeparam name="T">The type of the value that corresponds to the key that you specified.</typeparam>
            <returns>The value that corresponds to the key that you specified.</returns>
        </member>
        <member name="M:NRedisStack.Graph.Record.GetString(System.Int32)">
            <summary>
            Gets the string representation of a value at the given index.
            </summary>
            <param name="index">The index of the value that you want to get.</param>
            <returns>The string value at the index that you specified.</returns>
        </member>
        <member name="M:NRedisStack.Graph.Record.GetString(System.String)">
            <summary>
            Gets the string representation of a value by key.
            </summary>
            <param name="key">The key of the value that you want to get.</param>
            <returns>The string value at the key that you specified.</returns>
        </member>
        <member name="M:NRedisStack.Graph.Record.ContainsKey(System.String)">
            <summary>
            Does the key exist in the record?
            </summary>
            <param name="key">The key to check.</param>
            <returns></returns>
        </member>
        <member name="P:NRedisStack.Graph.Record.Size">
            <summary>
            How many keys are in the record?
            </summary>
        </member>
        <member name="M:NRedisStack.Graph.Record.GetHashCode">
            <summary>
            Overridden method that generates a hash code based on the hash codes of the keys and values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.Graph.Record.ToString">
            <summary>
            Overridden method that emits a string of representing all of the values in a record.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRedisStack.Graph.ResultSet">
            <summary>
            Represents the result from a RedisGraph query.
            </summary>
        </member>
        <member name="M:NRedisStack.Graph.ResultSet.GetEnumerator">
            <summary>
            Get the enumerator for this result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.Graph.ResultSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for this result set.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRedisStack.Graph.Statistics">
            <summary>
            Query result statistics are encapsulated by this class.
            </summary>
        </member>
        <member name="M:NRedisStack.Graph.Statistics.GetStringValue(System.String)">
            <summary>
            Retrieves the relevant statistic.
            </summary>
            <param name="label">The requested statistic label.</param>
            <returns>A string representation of the specific statistic or null</returns>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.NodesCreated">
            <summary>
            Number of nodes created.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.NodesDeleted">
            <summary>
            Number of nodes deleted.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.IndicesAdded">
            <summary>
            Number of indices added.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.IndicesCreated">
            <summary>
            Number of indices created.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.IndicesDeleted">
            <summary>
            Number of indices deleted.
            </summary>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.LabelsAdded">
            <summary>
            Number of labels added.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.RelationshipsDeleted">
            <summary>
            Number of relationships deleted.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.RelationshipsCreated">
            <summary>
            Number of relationships created.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.PropertiesSet">
            <summary>
            Number of properties set.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.QueryInternalExecutionTime">
            <summary>
            How long the query took to execute.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.GraphRemovedInternalExecutionTime">
            <summary>
            How long it took to remove a graph.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRedisStack.Graph.Statistics.CachedExecution">
            <summary>
            The execution plan was cached on RedisGraph.
            </summary>
        </member>
        <member name="M:NRedisStack.GraphCommandBuilder.Query(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandBuilder.Query(System.String,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandBuilder.RO_Query(System.String,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandBuilder.Delete(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandBuilder.Explain(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandBuilder.Profile(System.String,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandBuilder.List">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandBuilder.ConfigSet(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandBuilder.ConfigGet(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandBuilder.Slowlog(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.Query(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.Query(System.String,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.RO_Query(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.RO_Query(System.String,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.CallProcedure(System.String,System.String,NRedisStack.Graph.ProcedureMode)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.CallProcedure(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},NRedisStack.Graph.ProcedureMode)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.CallProcedure(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},NRedisStack.Graph.ProcedureMode)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.Delete(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.Explain(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.Profile(System.String,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.List">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.ConfigSet(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.ConfigGet(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommands.Slowlog(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.QueryAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.QueryAsync(System.String,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.RO_QueryAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.RO_QueryAsync(System.String,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.CallProcedureAsync(System.String,System.String,NRedisStack.Graph.ProcedureMode)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.CallProcedureAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},NRedisStack.Graph.ProcedureMode)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.CallProcedureAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},NRedisStack.Graph.ProcedureMode)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.DeleteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.ExplainAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.ProfileAsync(System.String,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.ListAsync">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.ConfigSetAsync(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.ConfigGetAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.GraphCommandsAsync.SlowlogAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.IGraphCommands.Query(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <summary>
            Execute a Cypher query with parameters.
            </summary>
            <param name="graphName">A graph to perform the query on.</param>
            <param name="query">The Cypher query.</param>
            <param name="parameters">Parameters map.</param>
            <param name="timeout">Timeout (optional).</param>
            <returns>A result set.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.query"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommands.Query(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Execute a Cypher query.
            </summary>
            <param name="graphName">A graph to perform the query on.</param>
            <param name="query">The Cypher query.</param>
            <param name="timeout">Timeout (optional).</param>
            <returns>A result set.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.query"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommands.RO_Query(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <summary>
            Execute a Cypher query with parameters.
            </summary>
            <param name="graphName">A graph to perform the query on.</param>
            <param name="query">The Cypher query.</param>
            <param name="parameters">Parameters map.</param>
            <param name="timeout">Timeout (optional).</param>
            <returns>A result set.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.ro_query"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommands.RO_Query(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Execute a Cypher query.
            </summary>
            <param name="graphName">A graph to perform the query on.</param>
            <param name="query">The Cypher query.</param>
            <param name="timeout">Timeout (optional).</param>
            <returns>A result set.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.ro_query"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommands.CallProcedure(System.String,System.String,NRedisStack.Graph.ProcedureMode)">
            <summary>
            Call a saved procedure.
            </summary>
            <param name="graphName">The graph containing the saved procedure.</param>
            <param name="procedure">The procedure name.</param>
            <param name="procedureMode">The mode of the saved procedure. Defaults to <see cref="F:NRedisStack.Graph.ProcedureMode.Write"/>.</param>
            <returns>A result set.</returns>
        </member>
        <member name="M:NRedisStack.IGraphCommands.CallProcedure(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},NRedisStack.Graph.ProcedureMode)">
            <summary>
            Call a saved procedure with parameters.
            </summary>
            <param name="graphName">The graph containing the saved procedure.</param>
            <param name="procedure">The procedure name.</param>
            <param name="args">A collection of positional arguments.</param>
            <param name="procedureMode">The mode of the saved procedure. Defaults to <see cref="F:NRedisStack.Graph.ProcedureMode.Write"/>.</param>
            <returns>A result set.</returns>
        </member>
        <member name="M:NRedisStack.IGraphCommands.CallProcedure(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},NRedisStack.Graph.ProcedureMode)">
            <summary>
            Call a saved procedure with parameters.
            </summary>
            <param name="graphName">The graph containing the saved procedure.</param>
            <param name="procedure">The procedure name.</param>
            <param name="args">A collection of positional arguments.</param>
            <param name="kwargs">A collection of keyword arguments.</param>
            <param name="procedureMode">The mode of the saved procedure. Defaults to <see cref="F:NRedisStack.Graph.ProcedureMode.Write"/>.</param>
            <returns>A result set.</returns>
        </member>
        <member name="M:NRedisStack.IGraphCommands.Delete(System.String)">
            <summary>
            Delete an existing graph.
            </summary>
            <param name="graphName">The graph to delete.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise/></returns>
            <remarks><seealso href="https://redis.io/commands/graph.delete"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommands.Explain(System.String,System.String)">
            <summary>
            Constructs a query execution plan but does not run it. Inspect this execution plan to better understand how your
            query will get executed.
            </summary>
            <param name="graphName">The graph name.</param>
            <param name="query">The query.</param>
            <returns>String representation of a query execution plan.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.explain"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommands.Profile(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Executes a query and produces an execution plan augmented with metrics for each operation's execution.
            </summary>
            <param name="graphName">The graph name.</param>
            <param name="query">The query.</param>
            <param name="timeout">Timeout (optional).</param>
            <returns>String representation of a query execution plan,
            with details on results produced by and time spent in each operation.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.profile"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommands.List">
            <summary>
            Lists all graph keys in the keyspace.
            </summary>
            <returns>List of all graph keys in the keyspace.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.list"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommands.ConfigSet(System.String,System.Object)">
            <summary>
            Set the value of a RedisGraph configuration parameter.
            </summary>
            <param name="configName">The config name.</param>
            <param name="value">Value to set.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/graph.config-set"/></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.IGraphCommands.ConfigGet(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.IGraphCommands.Slowlog(System.String)" -->
        <member name="M:NRedisStack.IGraphCommandsAsync.QueryAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <summary>
            Execute a Cypher query with parameters.
            </summary>
            <param name="graphName">A graph to perform the query on.</param>
            <param name="query">The Cypher query.</param>
            <param name="parameters">Parameters map.</param>
            <param name="timeout">Timeout (optional).</param>
            <returns>A result set.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.query"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommandsAsync.QueryAsync(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Execute a Cypher query.
            </summary>
            <param name="graphName">A graph to perform the query on.</param>
            <param name="query">The Cypher query.</param>
            <param name="timeout">Timeout (optional).</param>
            <returns>A result set.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.query"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommandsAsync.RO_QueryAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <summary>
            Execute a Cypher query with parameters.
            </summary>
            <param name="graphName">A graph to perform the query on.</param>
            <param name="query">The Cypher query.</param>
            <param name="parameters">Parameters map.</param>
            <param name="timeout">Timeout (optional).</param>
            <returns>A result set.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.ro_query"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommandsAsync.RO_QueryAsync(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Execute a Cypher query.
            </summary>
            <param name="graphName">A graph to perform the query on.</param>
            <param name="query">The Cypher query.</param>
            <param name="timeout">Timeout (optional).</param>
            <returns>A result set.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.ro_query"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommandsAsync.CallProcedureAsync(System.String,System.String,NRedisStack.Graph.ProcedureMode)">
            <summary>
            Call a saved procedure.
            </summary>
            <param name="graphName">The graph containing the saved procedure.</param>
            <param name="procedure">The procedure name.</param>
            <param name="procedureMode">The mode of the saved procedure. Defaults to <see cref="F:NRedisStack.Graph.ProcedureMode.Write"/>.</param>
            <returns>A result set.</returns>
        </member>
        <member name="M:NRedisStack.IGraphCommandsAsync.CallProcedureAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},NRedisStack.Graph.ProcedureMode)">
            <summary>
            Call a saved procedure with parameters.
            </summary>
            <param name="graphName">The graph containing the saved procedure.</param>
            <param name="procedure">The procedure name.</param>
            <param name="args">A collection of positional arguments.</param>
            <param name="procedureMode">The mode of the saved procedure. Defaults to <see cref="F:NRedisStack.Graph.ProcedureMode.Write"/>.</param>
            <returns>A result set.</returns>
        </member>
        <member name="M:NRedisStack.IGraphCommandsAsync.CallProcedureAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},NRedisStack.Graph.ProcedureMode)">
            <summary>
            Call a saved procedure with parameters.
            </summary>
            <param name="graphName">The graph containing the saved procedure.</param>
            <param name="procedure">The procedure name.</param>
            <param name="args">A collection of positional arguments.</param>
            <param name="kwargs">A collection of keyword arguments.</param>
            <param name="procedureMode">The mode of the saved procedure. Defaults to <see cref="F:NRedisStack.Graph.ProcedureMode.Write"/>.</param>
            <returns>A result set.</returns>
        </member>
        <member name="M:NRedisStack.IGraphCommandsAsync.DeleteAsync(System.String)">
            <summary>
            Delete an existing graph.
            </summary>
            <param name="graphName">The graph to delete.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise/></returns>
            <remarks><seealso href="https://redis.io/commands/graph.delete"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommandsAsync.ExplainAsync(System.String,System.String)">
            <summary>
            Constructs a query execution plan but does not run it. Inspect this execution plan to better understand how your
            query will get executed.
            </summary>
            <param name="graphName">The graph name.</param>
            <param name="query">The query.</param>
            <returns>String representation of a query execution plan.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.explain"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommandsAsync.ProfileAsync(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Executes a query and produces an execution plan augmented with metrics for each operation's execution.
            </summary>
            <param name="graphName">The graph name.</param>
            <param name="query">The query.</param>
            <param name="timeout">Timeout (optional).</param>
            <returns>String representation of a query execution plan,
            with details on results produced by and time spent in each operation.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.profile"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommandsAsync.ListAsync">
            <summary>
            Lists all graph keys in the keyspace.
            </summary>
            <returns>List of all graph keys in the keyspace.</returns>
            <remarks><seealso href="https://redis.io/commands/graph.list"/></remarks>
        </member>
        <member name="M:NRedisStack.IGraphCommandsAsync.ConfigSetAsync(System.String,System.Object)">
            <summary>
            Set the value of a RedisGraph configuration parameter.
            </summary>
            <param name="configName">The config name.</param>
            <param name="value">Value to set.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/graph.config-set"/></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.IGraphCommandsAsync.ConfigGetAsync(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.IGraphCommandsAsync.SlowlogAsync(System.String)" -->
        <member name="M:NRedisStack.IJsonCommands.ArrAppend(StackExchange.Redis.RedisKey,System.String,System.Object[])">
            <summary>
            Appends the provided items to the array at the provided path.
            </summary>
            <param name="key">The key to append to</param>
            <param name="path">The path to append to</param>
            <param name="values">the values to append</param>
            <returns>The new array sizes for the appended paths</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrappend"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.ArrIndex(StackExchange.Redis.RedisKey,System.String,System.Object,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Finds the index of the provided item within the provided range
            </summary>
            <param name="key">The key to look up.</param>
            <param name="path">The json path.</param>
            <param name="value">The value to find the index of.</param>
            <param name="start">The starting index within the array. Inclusive.</param>
            <param name="stop">The ending index within the array. Exclusive</param>
            <returns>The index of the value for each array the path resolved to.</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrindex"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.ArrInsert(StackExchange.Redis.RedisKey,System.String,System.Int64,System.Object[])">
            <summary>
            Inserts the provided items at the provided index within a json array.
            </summary>
            <param name="key">The key to insert into.</param>
            <param name="path">The path of the array(s) within the key to insert into.</param>
            <param name="index">The index to insert at.</param>
            <param name="values">The values to insert</param>
            <returns>The new size of each array the item was inserted into.</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrinsert"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.ArrLen(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Gets the length of the arrays resolved by the provided path.
            </summary>
            <param name="key">The key of the json object.</param>
            <param name="path">The path to the array(s)</param>
            <returns>The length of each array resolved by the json path.</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrlen"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.ArrPop(StackExchange.Redis.RedisKey,System.String,System.Nullable{System.Int64})">
            <summary>
            Pops an item from the array(s) at the provided index. Or the last element if no index is provided.
            </summary>
            <param name="key">The json key to use.</param>
            <param name="path">The path of the array(s).</param>
            <param name="index">The index to pop from</param>
            <returns>The items popped from the array</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrpop"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.ArrTrim(StackExchange.Redis.RedisKey,System.String,System.Int64,System.Int64)">
            <summary>
            Trims the array(s) at the provided path, leaving the range between the specified indexes (inclusive).
            </summary>
            <param name="key">The key to trim from.</param>
            <param name="path">The path of the array(s) within the json object to trim.</param>
            <param name="start">the starting index to retain.</param>
            <param name="stop">The ending index to retain.</param>
            <returns>The new length of the array(s) after they're trimmed.</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrtrim"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Clear(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Clear's container values(arrays/objects), and sets numeric values to 0.
            </summary>
            <param name="key">The key to clear.</param>
            <param name="path">The path to clear.</param>
            <returns>number of values cleared</returns>
            <remarks><seealso href="https://redis.io/commands/json.clear"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Del(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Deletes a json value.
            </summary>
            <param name="key">The key to delete from.</param>
            <param name="path">The path to delete.</param>
            <returns>number of path's deleted</returns>
            <remarks><seealso href="https://redis.io/commands/json.del"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Forget(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Deletes a json value.
            </summary>
            <param name="key">The key to delete from.</param>
            <param name="path">The path to delete.</param>
            <returns>number of path's deleted</returns>
            <remarks><seealso href="https://redis.io/commands/json.forget"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Get(StackExchange.Redis.RedisKey,System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue})">
            <summary>
            Gets the value stored at the key and path in redis.
            </summary>
            <param name="key">The key to retrieve.</param>
            <param name="indent">the indentation string for nested levels</param>
            <param name="newLine">sets the string that's printed at the end of each line</param>
            <param name="space">sets the string that's put between a key and a value</param>
            <param name="path">the path to get.</param>
            <returns>The requested items</returns>
            <remarks><seealso href="https://redis.io/commands/json.get"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Get(StackExchange.Redis.RedisKey,System.String[],System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue})">
            <summary>
            Gets the values stored at the provided paths in redis.
            </summary>
            <param name="key">The key to pull from.</param>
            <param name="paths">The paths within the key to pull.</param>
            <param name="indent">the indentation string for nested levels</param>
            <param name="newLine">sets the string that's printed at the end of each line</param>
            <param name="space">sets the string that's put between a key and a value</param>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Get``1(StackExchange.Redis.RedisKey,System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Generically gets an item stored in Redis.
            </summary>
            <param name="key">The key to retrieve</param>
            <param name="path">The path to retrieve</param>
            <param name="serializerOptions">Json serializer options to use for deserialization.</param>
            <typeparam name="T">The type retrieved</typeparam>
            <returns>The object requested</returns>
            <remarks><seealso href="https://redis.io/commands/json.get"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.GetEnumerable``1(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Retrieves a group of items stored in Redis, appropriate if the path will resolve to multiple records.
            </summary>
            <param name="key">The key to pull from.</param>
            <param name="path">The path to pull.</param>
            <typeparam name="T">The type.</typeparam>
            <returns>An enumerable of the requested tyep</returns>
            <remarks><seealso href="https://redis.io/commands/json.get"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.MGet(StackExchange.Redis.RedisKey[],System.String)">
            <summary>
            Gets the provided path from multiple keys
            </summary>
            <param name="keys">The keys to retrieve from.</param>
            <param name="path">The path to retrieve</param>
            <returns>An array of RedisResults with the requested data.</returns>
            <remarks><seealso href="https://redis.io/commands/json.mget"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.NumIncrby(StackExchange.Redis.RedisKey,System.String,System.Double)">
            <summary>
            Increments the fields at the provided path by the provided number.
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to increment.</param>
            <param name="value">The value to increment by.</param>
            <returns>The new values after being incremented, or null if the path resolved a non-numeric.</returns>
            <remarks><seealso href="https://redis.io/commands/json.numincrby"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.ObjKeys(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Gets the keys of the object at the provided path.
            </summary>
            <param name="key">the key of the json object.</param>
            <param name="path">The path of the object(s)</param>
            <returns>the keys of the resolved object(s)</returns>
            <remarks><seealso href="https://redis.io/commands/json.objkeys"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.ObjLen(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            returns the number of keys in the object(s) at the provided path.
            </summary>
            <param name="key">The key of the json object.</param>
            <param name="path">The path of the object(s) to resolve.</param>
            <returns>The length of the object(s) keyspace.</returns>
            <remarks><seealso href="https://redis.io/commands/json.objlen"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Resp(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Gets the key in RESP(Redis Serialization Protocol) form.
            </summary>
            <param name="key">The key to get.</param>
            <param name="path">Path within the key to get.</param>
            <returns>the resultant resp</returns>
            <remarks><seealso href="https://redis.io/commands/json.resp"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Set(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Object,StackExchange.Redis.When,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Set's the key/path to the provided value.
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to set within the key.</param>
            <param name="obj">The value to set.</param>
            <param name="when">When to set the value.</param>
            <param name="serializerOptions">Json serializer options to use for serialization.</param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.set"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Set(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.When)">
            <summary>
            Set's the key/path to the provided value.
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to set within the key.</param>
            <param name="json">The value to set.</param>
            <param name="when">When to set the value.</param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.set"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.MSet(NRedisStack.Json.DataTypes.KeyPathValue[])">
            <summary>
            Sets or updates the JSON value of one or more keys.
            </summary>
            <param name="KeyPathValueList">The key, The value to set and
            The path to set within the key, must be > 1 </param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.mset"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Merge(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue)">
            <summary>
            Merges a given JSON value into matching paths. Consequently,
            JSON values at matching paths are updated, deleted, or expanded with new children
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to set within the key.</param>
            <param name="json">The value to set.</param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.merge"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Merge(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Merges a given JSON value into matching paths. Consequently,
            JSON values at matching paths are updated, deleted, or expanded with new children
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to set within the key.</param>
            <param name="obj">The value to set.</param>
            <param name="serializerOptions">Json serializer options to use for serialization.</param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.merge"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.SetFromFile(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.String,StackExchange.Redis.When)">
            <summary>
            Sets or updates the JSON value of one or more keys.
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to set within the key.</param>
            <param name="filePath">The path of the file to set.</param>
            <param name="when">When to set the value.</param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.set"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.SetFromDirectory(StackExchange.Redis.RedisValue,System.String,StackExchange.Redis.When)">
            <summary>
            Set all json files in the provided file Path.
            </summary>
            <param name="path">The path to set within the file name as key.</param>
            <param name="filesPath">The path of the file to set.</param>
            <param name="when">When to set the value.</param>
            <returns>The number of files that have been set</returns>
            <remarks><seealso href="https://redis.io/commands/json.set"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.StrAppend(StackExchange.Redis.RedisKey,System.String,System.String)">
            <summary>
            Appends the provided string to the string(s) at the provided path.
            </summary>
            <param name="key">The key to append to.</param>
            <param name="path">The path of the string(s) to append to.</param>
            <param name="value">The value to append.</param>
            <returns>The new length of the string(s) appended to, those lengths
            will be null if the path did not resolve ot a string.</returns>
            <remarks><seealso href="https://redis.io/commands/json.strappend"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.StrLen(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Check's the length of the string(s) at the provided path.
            </summary>
            <param name="key">The key of the json object.</param>
            <param name="path">The path of the string(s) within the json object.</param>
            <returns>The length of the string(s) appended to, those lengths
            will be null if the path did not resolve ot a string.</returns>
            <remarks><seealso href="https://redis.io/commands/json.strlen"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Toggle(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Toggles the boolean value(s) at the provided path.
            </summary>
            <param name="key">The key of the json object.</param>
            <param name="path">The path of the value(s) to toggle.</param>
            <returns>the new value(s). Which will be null if the path did not resolve to a boolean.</returns>
            <remarks><seealso href="https://redis.io/commands/json.toggle"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.Type(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Gets the type(s) of the item(s) at the provided json path.
            </summary>
            <param name="key">The key of the JSON object.</param>
            <param name="path">The path to resolve.</param>
            <returns>An array of types.</returns>
            <remarks><seealso href="https://redis.io/commands/json.type"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommands.DebugMemory(System.String,System.String)">
            <summary>
            Report a value's memory usage in bytes. path defaults to root if not provided.
            </summary>
            <param name="key">The object's key</param>
            <param name="path">The path within the object.</param>
            <returns>the value's size in bytes.</returns>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.ArrAppendAsync(StackExchange.Redis.RedisKey,System.String,System.Object[])">
            <summary>
            Appends the provided items to the array at the provided path.
            </summary>
            <param name="key">The key to append to</param>
            <param name="path">The path to append to</param>
            <param name="values">the values to append</param>
            <returns>The new array sizes for the appended paths</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrappend"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.ArrIndexAsync(StackExchange.Redis.RedisKey,System.String,System.Object,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Finds the index of the provided item within the provided range
            </summary>
            <param name="key">The key to look up.</param>
            <param name="path">The json path.</param>
            <param name="value">The value to find the index of.</param>
            <param name="start">The starting index within the array. Inclusive.</param>
            <param name="stop">The ending index within the array. Exclusive</param>
            <returns>The index of the value for each array the path resolved to.</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrindex"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.ArrInsertAsync(StackExchange.Redis.RedisKey,System.String,System.Int64,System.Object[])">
            <summary>
            Inserts the provided items at the provided index within a json array.
            </summary>
            <param name="key">The key to insert into.</param>
            <param name="path">The path of the array(s) within the key to insert into.</param>
            <param name="index">The index to insert at.</param>
            <param name="values">The values to insert</param>
            <returns>The new size of each array the item was inserted into.</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrinsert"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.ArrLenAsync(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Gets the length of the arrays resolved by the provided path.
            </summary>
            <param name="key">The key of the json object.</param>
            <param name="path">The path to the array(s)</param>
            <returns>The length of each array resolved by the json path.</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrlen"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.ArrPopAsync(StackExchange.Redis.RedisKey,System.String,System.Nullable{System.Int64})">
            <summary>
            Pops an item from the array(s) at the provided index. Or the last element if no index is provided.
            </summary>
            <param name="key">The json key to use.</param>
            <param name="path">The path of the array(s).</param>
            <param name="index">The index to pop from</param>
            <returns>The items popped from the array</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrpop"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.ArrTrimAsync(StackExchange.Redis.RedisKey,System.String,System.Int64,System.Int64)">
            <summary>
            Trims the array(s) at the provided path, leaving the range between the specified indexes (inclusive).
            </summary>
            <param name="key">The key to trim from.</param>
            <param name="path">The path of the array(s) within the json object to trim.</param>
            <param name="start">the starting index to retain.</param>
            <param name="stop">The ending index to retain.</param>
            <returns>The new length of the array(s) after they're trimmed.</returns>
            <remarks><seealso href="https://redis.io/commands/json.arrtrim"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.ClearAsync(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Clear's container values(arrays/objects), and sets numeric values to 0.
            </summary>
            <param name="key">The key to clear.</param>
            <param name="path">The path to clear.</param>
            <returns>number of values cleared</returns>
            <remarks><seealso href="https://redis.io/commands/json.clear"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.DelAsync(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Deletes a json value.
            </summary>
            <param name="key">The key to delete from.</param>
            <param name="path">The path to delete.</param>
            <returns>number of path's deleted</returns>
            <remarks><seealso href="https://redis.io/commands/json.del"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.ForgetAsync(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Deletes a json value.
            </summary>
            <param name="key">The key to delete from.</param>
            <param name="path">The path to delete.</param>
            <returns>number of path's deleted</returns>
            <remarks><seealso href="https://redis.io/commands/json.forget"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.GetAsync(StackExchange.Redis.RedisKey,System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue})">
            <summary>
            Gets the value stored at the key and path in redis.
            </summary>
            <param name="key">The key to retrieve.</param>
            <param name="indent">the indentation string for nested levels</param>
            <param name="newLine">sets the string that's printed at the end of each line</param>
            <param name="space">sets the string that's put between a key and a value</param>
            <param name="path">the path to get.</param>
            <returns>The requested Items</returns>
            <remarks><seealso href="https://redis.io/commands/json.get"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.GetAsync(StackExchange.Redis.RedisKey,System.String[],System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue})">
            <summary>
            Gets the values stored at the provided paths in redis.
            </summary>
            <param name="key">The key to pull from.</param>
            <param name="paths">The paths within the key to pull.</param>
            <param name="indent">the indentation string for nested levels</param>
            <param name="newLine">sets the string that's printed at the end of each line</param>
            <param name="space">sets the string that's put between a key and a value</param>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.GetAsync``1(StackExchange.Redis.RedisKey,System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Generically gets an Item stored in Redis.
            </summary>
            <param name="key">The key to retrieve</param>
            <param name="path">The path to retrieve</param>
            <param name="serializerOptions">Json serializer options to use for deserialization.</param>
            <typeparam name="T">The type retrieved</typeparam>
            <returns>The object requested</returns>
            <remarks><seealso href="https://redis.io/commands/json.get"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.GetEnumerableAsync``1(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            retrieves a group of items stored in redis, appropriate if the path will  resolve to multiple records.
            </summary>
            <param name="key">The key to pull from.</param>
            <param name="path">The path to pull.</param>
            <typeparam name="T">The type.</typeparam>
            <returns>An enumerable of the requested tyep</returns>
            <remarks><seealso href="https://redis.io/commands/json.get"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.MGetAsync(StackExchange.Redis.RedisKey[],System.String)">
            <summary>
            Gets the provided path from multiple keys
            </summary>
            <param name="keys">The keys to retrieve from.</param>
            <param name="path">The path to retrieve</param>
            <returns>An array of RedisResults with the requested data.</returns>
            <remarks><seealso href="https://redis.io/commands/json.mget"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.NumIncrbyAsync(StackExchange.Redis.RedisKey,System.String,System.Double)">
            <summary>
            Increments the fields at the provided path by the provided number.
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to increment.</param>
            <param name="value">The value to increment by.</param>
            <returns>The new values after being incremented, or null if the path resolved a non-numeric.</returns>
            <remarks><seealso href="https://redis.io/commands/json.numincrby"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.ObjKeysAsync(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Gets the keys of the object at the provided path.
            </summary>
            <param name="key">the key of the json object.</param>
            <param name="path">The path of the object(s)</param>
            <returns>the keys of the resolved object(s)</returns>
            <remarks><seealso href="https://redis.io/commands/json.objkeys"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.ObjLenAsync(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            returns the number of keys in the object(s) at the provided path.
            </summary>
            <param name="key">The key of the json object.</param>
            <param name="path">The path of the object(s) to resolve.</param>
            <returns>The length of the object(s) keyspace.</returns>
            <remarks><seealso href="https://redis.io/commands/json.objlen"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.RespAsync(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Gets the key in RESP(Redis Serialization Protocol) form.
            </summary>
            <param name="key">The key to get.</param>
            <param name="path">Path within the key to get.</param>
            <returns>the resultant resp</returns>
            <remarks><seealso href="https://redis.io/commands/json.resp"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.SetAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Object,StackExchange.Redis.When,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Set's the key/path to the provided value.
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to set within the key.</param>
            <param name="obj">The value to set.</param>
            <param name="when">When to set the value.</param>
            <param name="serializerOptions">Json serializer options to use for serialization.</param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.set"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.SetAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.When)">
            <summary>
            Set's the key/path to the provided value.
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to set within the key.</param>
            <param name="json">The value to set.</param>
            <param name="when">When to set the value.</param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.set"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.MSetAsync(NRedisStack.Json.DataTypes.KeyPathValue[])">
            <summary>
            Sets or updates the JSON value of one or more keys.
            </summary>
            <param name="KeyPathValueList">The key, The value to set and
            The path to set within the key, must be > 1 </param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.mset"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.MergeAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue)">
            <summary>
            Merges a given JSON value into matching paths. Consequently,
            JSON values at matching paths are updated, deleted, or expanded with new children
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to set within the key.</param>
            <param name="json">The value to set.</param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.merge"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.MergeAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Merges a given JSON value into matching paths. Consequently,
            JSON values at matching paths are updated, deleted, or expanded with new children
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to set within the key.</param>
            <param name="obj">The value to set.</param>
            <param name="serializerOptions">Json serializer options to use for serialization.</param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.merge"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.SetFromFileAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.String,StackExchange.Redis.When)">
            <summary>
            Set json file from the provided file Path.
            </summary>
            <param name="key">The key.</param>
            <param name="path">The path to set within the key.</param>
            <param name="filePath">The path of the file to set.</param>
            <param name="when">When to set the value.</param>
            <returns>The disposition of the command</returns>
            <remarks><seealso href="https://redis.io/commands/json.set"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.SetFromDirectoryAsync(StackExchange.Redis.RedisValue,System.String,StackExchange.Redis.When)">
            <summary>
            Set all json files in the provided file Path.
            </summary>
            <param name="path">The path to set within the file name as key.</param>
            <param name="filesPath">The path of the file to set.</param>
            <param name="when">When to set the value.</param>
            <returns>The number of files that have been set</returns>
            <remarks><seealso href="https://redis.io/commands/json.set"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.StrAppendAsync(StackExchange.Redis.RedisKey,System.String,System.String)">
            <summary>
            Appends the provided string to the string(s) at the provided path.
            </summary>
            <param name="key">The key to append to.</param>
            <param name="path">The path of the string(s) to append to.</param>
            <param name="value">The value to append.</param>
            <returns>The new length of the string(s) appended to, those lengths will be null if the path did not resolve ot a string.</returns>
            <remarks><seealso href="https://redis.io/commands/json.strappend"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.StrLenAsync(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Check's the length of the string(s) at the provided path.
            </summary>
            <param name="key">The key of the json object.</param>
            <param name="path">The path of the string(s) within the json object.</param>
            <returns>The length of the string(s) appended to, those lengths will be null if the path did not resolve ot a string.</returns>
            <remarks><seealso href="https://redis.io/commands/json.strlen"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.ToggleAsync(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Toggles the boolean value(s) at the provided path.
            </summary>
            <param name="key">The key of the json object.</param>
            <param name="path">The path of the value(s) to toggle.</param>
            <returns>the new value(s). Which will be null if the path did not resolve to a boolean.</returns>
            <remarks><seealso href="https://redis.io/commands/json.toggle"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.TypeAsync(StackExchange.Redis.RedisKey,System.String)">
            <summary>
            Gets the type(s) of the item(s) at the provided json path.
            </summary>
            <param name="key">The key of the JSON object.</param>
            <param name="path">The path to resolve.</param>
            <returns>An array of types.</returns>
            <remarks><seealso href="https://redis.io/commands/json.type"/></remarks>
        </member>
        <member name="M:NRedisStack.IJsonCommandsAsync.DebugMemoryAsync(System.String,System.String)">
            <summary>
            Report a value's memory usage in bytes. path defaults to root if not provided.
            </summary>
            <param name="key">The object's key</param>
            <param name="path">The path within the object.</param>
            <returns>the value's size in bytes.</returns>
        </member>
        <member name="M:NRedisStack.JsonCommands.Resp(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Set(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Object,StackExchange.Redis.When,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Set(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.When)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.MSet(NRedisStack.Json.DataTypes.KeyPathValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Merge(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Merge(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Object,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.SetFromFile(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.String,StackExchange.Redis.When)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.SetFromDirectory(StackExchange.Redis.RedisValue,System.String,StackExchange.Redis.When)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.StrAppend(StackExchange.Redis.RedisKey,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.StrLen(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Toggle(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Type(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.ArrAppend(StackExchange.Redis.RedisKey,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.ArrIndex(StackExchange.Redis.RedisKey,System.String,System.Object,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.ArrInsert(StackExchange.Redis.RedisKey,System.String,System.Int64,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.ArrLen(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.ArrPop(StackExchange.Redis.RedisKey,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.ArrTrim(StackExchange.Redis.RedisKey,System.String,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Clear(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Del(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Forget(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Get(StackExchange.Redis.RedisKey,System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Get(StackExchange.Redis.RedisKey,System.String[],System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue},System.Nullable{StackExchange.Redis.RedisValue})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.Get``1(StackExchange.Redis.RedisKey,System.String,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.GetEnumerable``1(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.MGet(StackExchange.Redis.RedisKey[],System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.NumIncrby(StackExchange.Redis.RedisKey,System.String,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.ObjKeys(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommands.ObjLen(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommandsAsync.GetEnumerableAsync``1(StackExchange.Redis.RedisKey,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommandsAsync.SetAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Object,StackExchange.Redis.When,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommandsAsync.MergeAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.JsonCommandsAsync.MergeAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.Object,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="P:NRedisStack.Search.Aggregation.Reducer.Name">
            <summary>
            The name of the reducer
            </summary>
        </member>
        <member name="T:NRedisStack.Search.Document">
            <summary>
            Document represents a single indexed document or entity in the engine
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.On(NRedisStack.Search.Literals.Enums.IndexDataType)">
            <summary>
            Currently supports HASH (default) and JSON. To index JSON, you must have the RedisJSON module
            installed.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.Prefix(System.String[])">
            <summary>
             Tells the index which keys it should index. You can add several prefixes to index.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.AddPrefix(System.String)">
            <summary>
             This method can be chained to add multiple prefixes.
             @see FTCreateParams#prefix(java.lang.params string[])
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.Filter(System.String)">
            <summary>
             A filter expression with the full RediSearch aggregation expression language.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.Language(System.String)">
            <summary>
            default language for documents in the index.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.LanguageField(System.String)">
            <summary>
             Document attribute set as the document language.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.Score(System.Double)">
            <summary>
             Default score for documents in the index.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.ScoreField(System.String)">
            <summary>
             Document attribute that you use as the document rank based on the user ranking.
             Ranking must be between 0.0 and 1.0.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.PayloadField(System.String)">
            <summary>
             Document attribute that you use as a binary safe payload string to the document that can be
             evaluated at query time by a custom scoring function or retrieved to the client.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.MaxTextFields">
            <summary>
             Forces RediSearch to encode indexes as if there were more than 32 text attributes.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.NoOffsets">
            <summary>
             Does not store term offsets for documents. It saves memory, but does not allow exact searches
             or highlighting.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.Temporary(System.Int64)">
            <summary>
             Creates a lightweight temporary index that expires after a specified period of inactivity.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.NoHL">
            <summary>
             Conserves storage space and memory by disabling highlighting support.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.NoHighlights">
            <summary>
             @see FTCreateParams#noHL()
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.NoFields">
            <summary>
             Does not store attribute bits for each term. It saves memory, but it does not allow filtering
             by specific attributes.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.NoFreqs">
            <summary>
             Avoids saving the term frequencies in the index. It saves memory, but does not allow sorting
             based on the frequencies of a given term within the document.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.Stopwords(System.String[])">
            <summary>
             Sets the index with a custom stopword list, to be ignored during indexing and search time.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.NoStopwords">
            <summary>
             The index does not have stopwords, not even the default ones.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTCreateParams.SkipInitialScan">
            <summary>
             Does not scan and index.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTSpellCheckParams.IncludeTerm(System.String)">
            <summary>
             Specifies an inclusion (INCLUDE) of a custom dictionary.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTSpellCheckParams.ExcludeTerm(System.String)">
            <summary>
             Specifies an inclusion (EXCLUDE) of a custom dictionary.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTSpellCheckParams.AddTerm(System.String,System.String)">
            <summary>
             Specifies an inclusion (INCLUDE) or exclusion (EXCLUDE) of a custom dictionary.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTSpellCheckParams.Distance(System.Int32)">
            <summary>
             Maximum Levenshtein distance for spelling suggestions (default: 1, max: 4).
            </summary>
        </member>
        <member name="M:NRedisStack.Search.FTSpellCheckParams.Dialect(System.Int32)">
            <summary>
             Selects the dialect version under which to execute the query.
            </summary>
        </member>
        <member name="T:NRedisStack.Search.Query">
            <summary>
             Query represents query parameters and filters to load results from the engine
            </summary>
        </member>
        <member name="T:NRedisStack.Search.Query.Filter">
            <summary>
            Filter represents a filtering rules in a query
            </summary>
        </member>
        <member name="T:NRedisStack.Search.Query.NumericFilter">
            <summary>
            NumericFilter wraps a range filter on a numeric field. It can be inclusive or exclusive
            </summary>
        </member>
        <member name="T:NRedisStack.Search.Query.GeoFilter">
            <summary>
            GeoFilter encapsulates a radius filter on a geographical indexed fields
            </summary>
        </member>
        <member name="F:NRedisStack.Search.Query._filters">
            <summary>
            The query's filter list. We only support AND operation on all those filters
            </summary>
        </member>
        <member name="P:NRedisStack.Search.Query.QueryString">
            <summary>
            The textual part of the query
            </summary>
        </member>
        <member name="F:NRedisStack.Search.Query._paging">
            <summary>
            The sorting parameters
            </summary>
        </member>
        <member name="P:NRedisStack.Search.Query.Verbatim">
            <summary>
            Set the query to verbatim mode, disabling stemming and query expansion
            </summary>
        </member>
        <member name="P:NRedisStack.Search.Query.NoContent">
            <summary>
            Set the query not to return the contents of documents, and rather just return the ids
            </summary>
        </member>
        <member name="P:NRedisStack.Search.Query.NoStopwords">
            <summary>
            Set the query not to filter for stopwords. In general this should not be used
            </summary>
        </member>
        <member name="P:NRedisStack.Search.Query.WithScores">
            <summary>
            Set the query to return a factored score for each results. This is useful to merge results from multiple queries.
            </summary>
        </member>
        <member name="P:NRedisStack.Search.Query.WithPayloads">
            <summary>
            Set the query to return object payloads, if any were given
            </summary>
        </member>
        <member name="P:NRedisStack.Search.Query.Language">
            <summary>
            Set the query language, for stemming purposes; see http://redisearch.io for documentation on languages and stemming
            </summary>
        </member>
        <member name="P:NRedisStack.Search.Query.Payload">
            <summary>
            Set the query payload to be evaluated by the scoring function
            </summary>
        </member>
        <member name="P:NRedisStack.Search.Query.SortBy">
            <summary>
            Set the query parameter to sort by
            </summary>
        </member>
        <member name="P:NRedisStack.Search.Query.SortAscending">
            <summary>
            Set the query parameter to sort by ASC by default
            </summary>
        </member>
        <member name="P:NRedisStack.Search.Query.Scorer">
            <summary>
            Set the query scoring. see https://oss.redislabs.com/redisearch/Scoring.html for documentation
            </summary>
        </member>
        <member name="M:NRedisStack.Search.Query.#ctor(System.String)">
            <summary>
            Create a new index
            </summary>
            <param name="queryString">The query string to use for this query.</param>
        </member>
        <member name="M:NRedisStack.Search.Query.Limit(System.Int32,System.Int32)">
            <summary>
            Limit the results to a certain offset and limit
            </summary>
            <param name="offset">the first result to show, zero based indexing</param>
            <param name="count">how many results we want to show</param>
            <returns>the query itself, for builder-style syntax</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.AddFilter(NRedisStack.Search.Query.Filter)">
            <summary>
            Add a filter to the query's filter list
            </summary>
            <param name="f">either a numeric or geo filter object</param>
            <returns>the query itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.SetPayload(System.String)">
            <summary>
            Set the query payload to be evaluated by the scoring function
            </summary>
            <param name="payload">the payload</param>
            <returns>the query itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.SetVerbatim(System.Boolean)">
            <summary>
            Set the query to verbatim mode, disabling stemming and query expansion
            </summary>
            <returns>the query itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.SetNoContent(System.Boolean)">
            <summary>
            Set the query not to return the contents of documents, and rather just return the ids
            </summary>
            <returns>the query itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.SetNoStopwords(System.Boolean)">
            <summary>
            Set the query not to filter for stopwords. In general this should not be used
            </summary>
            <returns>the query itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.SetWithScores(System.Boolean)">
            <summary>
            Set the query to return a factored score for each results. This is useful to merge results from
            multiple queries.
            </summary>
            <returns>the query itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.SetWithPayloads">
            <summary>
            Set the query to return object payloads, if any were given
            </summary>
            <returns>the query itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.SetLanguage(System.String)">
            <summary>
            Set the query language, for stemming purposes
            </summary>
            <param name="language">the language</param>
            <returns>the query itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.SetScorer(System.String)">
            <summary>
            Set the query language, for stemming purposes
            </summary>
            <param name="scorer"></param>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.Search.Query.LimitFields(System.String[])">
            <summary>
            Limit the query to results that are limited to a specific set of fields
            </summary>
            <param name="fields">a list of TEXT fields in the schemas</param>
            <returns>the query object itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.LimitKeys(System.String[])">
            <summary>
            Limit the query to results that are limited to a specific set of keys
            </summary>
            <param name="keys">a list of the TEXT fields in the schemas</param>
            <returns>the query object itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.ReturnFields(System.String[])">
            <summary>
            Result's projection - the fields to return by the query
            </summary>
            <param name="fields">fields a list of TEXT fields in the schemas</param>
            <returns>the query object itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.ReturnFields(NRedisStack.Search.FieldName[])">
            <summary>
            Result's projection - the fields to return by the query
            </summary>
            <param name="field">field a list of TEXT fields in the schemas</param>
            <returns>the query object itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.SetSortBy(System.String,System.Nullable{System.Boolean})">
            <summary>
            Set the query to be sorted by a sortable field defined in the schema
            </summary>
            <param name="field">the sorting field's name</param>
            <param name="ascending">if set to true, the sorting order is ascending, else descending</param>
            <returns>the query object itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.AddParam(System.String,System.Object)">
            <summary>
            Parameters can be referenced in the query string by a $ , followed by the parameter name,
            e.g., $user , and each such reference in the search query to a parameter name is substituted
            by the corresponding parameter value.
            Note: when calling this function with an externally supplied parameter, value should be a string.
            </summary>
            <param name="name"></param>
            <param name="value"> can be String, long or float</param>
            <returns>The query object itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.Dialect(System.Int32)">
            <summary>
            Set the dialect version to execute the query accordingly
            </summary>
            <param name="dialect"></param>
            <returns>the query object itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.Slop(System.Int32)">
            <summary>
            Set the slop to execute the query accordingly
            </summary>
            <param name="slop"></param>
            <returns>the query object itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.Timeout(System.Int64)">
            <summary>
            Set the timeout to execute the query accordingly
            </summary>
            <param name="timeout"></param>
            <returns>the query object itself</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.SetInOrder">
            <summary>
            Set the query terms appear in the same order in the document as in the query, regardless of the offsets between them
            </summary>
            <returns>the query object</returns>
        </member>
        <member name="M:NRedisStack.Search.Query.SetExpander(System.String)">
            <summary>
            Set the query to use a custom query expander instead of the stemmer
            </summary>
            <param name="field the expander field's nametheexpanderfield'sname"></param>
            <returns>the query object itself</returns>
        </member>
        <member name="T:NRedisStack.Search.Schema">
            <summary>
            Schema abstracts the schema definition when creating an index.
            Documents can contain fields not mentioned in the schema, but the index will only index pre-defined fields
            </summary>
        </member>
        <member name="F:NRedisStack.Search.Schema.GeoShapeField.CoordinateSystem.FLAT">
            <summary>
            For cartesian (X,Y).
            </summary>
        </member>
        <member name="F:NRedisStack.Search.Schema.GeoShapeField.CoordinateSystem.SPHERICAL">
            <summary>
            For geographic (lon, lat).
            </summary>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddField(NRedisStack.Search.Schema.Field)">
            <summary>
            Add a field to the schema.
            </summary>
            <param name="field">The <see cref="T:NRedisStack.Search.Schema.Field"/> to add.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddTextField(System.String,System.Double,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a Text field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="weight">Its weight, a positive floating point number.</param>
            <param name="sortable">If true, the text field can be sorted.</param>
            <param name="noStem"> Disable stemming when indexing its values.</param>
            <param name="phonetic">Declaring a text attribute as PHONETIC will perform phonetic matching on it in searches by default.</param>
            <param name="noIndex">Attributes can have the NOINDEX option, which means they will not be indexed.</param>
            <param name="unf">Set this to true to prevent the indexer from sorting on the normalized form.
            Normalied form is the field sent to lower case with all diaretics removed</param>
            <param name="withSuffixTrie">Keeps a suffix trie with all terms which match the suffix.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddTextField(NRedisStack.Search.FieldName,System.Double,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a Text field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="weight">Its weight, a positive floating point number.</param>
            <param name="sortable">If true, the text field can be sorted.</param>
            <param name="noStem"> Disable stemming when indexing its values.</param>
            <param name="phonetic">Declaring a text attribute as PHONETIC will perform phonetic matching on it in searches by default.</param>
            <param name="noIndex">Attributes can have the NOINDEX option, which means they will not be indexed.</param>
            <param name="unf">Set this to true to prevent the indexer from sorting on the normalized form.
            Normalied form is the field sent to lower case with all diaretics removed</param>
            <param name="withSuffixTrie">Keeps a suffix trie with all terms which match the suffix.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddGeoShapeField(System.String,NRedisStack.Search.Schema.GeoShapeField.CoordinateSystem)">
            <summary>
            Add a GeoShape field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="system">The coordinate system to use.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddGeoShapeField(NRedisStack.Search.FieldName,NRedisStack.Search.Schema.GeoShapeField.CoordinateSystem)">
            <summary>
            Add a GeoShape field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="system">The coordinate system to use.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddGeoField(NRedisStack.Search.FieldName,System.Boolean,System.Boolean)">
            <summary>
            Add a Geo field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="sortable">If true, the text field can be sorted.</param>
            <param name="noIndex">Attributes can have the NOINDEX option, which means they will not be indexed.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddGeoField(System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a Geo field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="sortable">If true, the text field can be sorted.</param>
            <param name="noIndex">Attributes can have the NOINDEX option, which means they will not be indexed.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddNumericField(NRedisStack.Search.FieldName,System.Boolean,System.Boolean)">
            <summary>
            Add a Numeric field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="sortable">If true, the text field can be sorted.</param>
            <param name="noIndex">Attributes can have the NOINDEX option, which means they will not be indexed.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddNumericField(System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a Numeric field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="sortable">If true, the text field can be sorted.</param>
            <param name="noIndex">Attributes can have the NOINDEX option, which means they will not be indexed.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddTagField(NRedisStack.Search.FieldName,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a Tag field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="sortable">If true, the field can be sorted.</param>
            <param name="unf">Set this to true to prevent the indexer from sorting on the normalized form.
            <param name="noIndex">Attributes can have the NOINDEX option, which means they will not be indexed.</param>
            <param name="separator">The tag separator.</param>
            <param name="caseSensitive">If true, Keeps the original letter cases of the tags.</param>
            Normalied form is the field sent to lower case with all diaretics removed</param>
            <param name="withSuffixTrie">Keeps a suffix trie with all terms which match the suffix.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddTagField(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a Tag field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="sortable">If true, the field can be sorted.</param>
            <param name="unf">Set this to true to prevent the indexer from sorting on the normalized form.
            <param name="noIndex">Attributes can have the NOINDEX option, which means they will not be indexed.</param>
            <param name="separator">The tag separator.</param>
            <param name="caseSensitive">If true, Keeps the original letter cases of the tags.</param>
            Normalied form is the field sent to lower case with all diaretics removed</param>
            <param name="withSuffixTrie">Keeps a suffix trie with all terms which match the suffix.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddVectorField(NRedisStack.Search.FieldName,NRedisStack.Search.Schema.VectorField.VectorAlgo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Add a Vector field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="algorithm">The vector similarity algorithm to use.</param>
            <param name="attribute">The algorithm attributes for the creation of the vector index.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="M:NRedisStack.Search.Schema.AddVectorField(System.String,NRedisStack.Search.Schema.VectorField.VectorAlgo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Add a Vector field to the schema.
            </summary>
            <param name="name">The field's name.</param>
            <param name="algorithm">The vector similarity algorithm to use.</param>
            <param name="attribute">The algorithm attributes for the creation of the vector index.</param>
            <returns>The <see cref="T:NRedisStack.Search.Schema"/> object.</returns>
        </member>
        <member name="T:NRedisStack.Search.SearchResult">
            <summary>
            SearchResult encapsulates the returned result from a search query.
            It contains publically accessible fields for the total number of results, and an array of <see cref="T:NRedisStack.Search.Document"/>
            objects conatining the actual returned documents.
            </summary>
        </member>
        <member name="M:NRedisStack.Search.SearchResult.ToJson">
            <summary>
            Converts the documents to a list of json strings. only works on a json documents index.
            </summary>
        </member>
        <member name="M:NRedisStack.ISearchCommands._List">
            <summary>
            Returns a list of all existing indexes.
            </summary>
            <returns>Array with index names.</returns>
            <remarks><seealso href="https://redis.io/commands/ft._list"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.Aggregate(System.String,NRedisStack.Search.Aggregation.AggregationRequest)">
            <summary>
            Run a search query on an index, and perform aggregate transformations on the results.
            </summary>
            <param name="index">The index name.</param>
            <param name="query">The query</param>
            <returns>An <see langword="AggregationResult"/> object</returns>
            <remarks><seealso href="https://redis.io/commands/ft.aggregate"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.AliasAdd(System.String,System.String)">
            <summary>
            Add an alias to an index.
            </summary>
            <param name="alias">Alias to be added to an index.</param>
            <param name="index">The index name.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.aliasadd"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.AliasDel(System.String)">
            <summary>
            Remove an alias to an index.
            </summary>
            <param name="alias">Alias to be removed.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.aliasdel"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.AliasUpdate(System.String,System.String)">
            <summary>
            Add an alias to an index. If the alias is already associated with another index,
            FT.ALIASUPDATE removes the alias association with the previous index.
            </summary>
            <param name="alias">Alias to be removed.</param>
            <param name="index">The index name.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.aliasdel"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.Alter(System.String,NRedisStack.Search.Schema,System.Boolean)">
            <summary>
            Add a new attribute to the index
            </summary>
            <param name="index">The index name.</param>
            <param name="skipInitialScan">If set, does not scan and index.</param>
            <param name="schema">the schema.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.alter"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.ConfigGet(System.String)">
            <summary>
            Retrieve configuration options.
            </summary>
            <param name="option">is name of the configuration option, or '*' for all.</param>
            <returns>An array reply of the configuration name and value.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.config-get"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.ConfigSet(System.String,System.String)">
            <summary>
            Describe configuration options.
            </summary>
            <param name="option">is name of the configuration option, or '*' for all.</param>
            <param name="value">is value of the configuration option.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.config-set"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.Create(System.String,NRedisStack.Search.FTCreateParams,NRedisStack.Search.Schema)">
            <summary>
            Create an index with the given specification.
            </summary>
            <param name="indexName">The index name.</param>
            <param name="parameters">Command's parameters.</param>
            <param name="schema">The index schema.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.create"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.CursorDel(System.String,System.Int64)">
            <summary>
            Delete a cursor from the index.
            </summary>
            <param name="indexName">The index name</param>
            <param name="cursorId">The cursor's ID.</param>
            <returns><see langword="true"/> if it has been deleted, <see langword="false"/> if it did not exist.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.cursor-del/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.CursorRead(System.String,System.Int64,System.Nullable{System.Int32})">
            <summary>
            Read next results from an existing cursor.
            </summary>
            <param name="indexName">The index name</param>
            <param name="cursorId">The cursor's ID.</param>
            <param name="count">Limit the amount of returned results.</param>
            <returns>A AggregationResult object with the results</returns>
            <remarks><seealso href="https://redis.io/commands/ft.cursor-read/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.DictAdd(System.String,System.String[])">
            <summary>
            Add terms to a dictionary.
            </summary>
            <param name="dict">The dictionary name</param>
            <param name="terms">Terms to add to the dictionary..</param>
            <returns>The number of new terms that were added.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.dictadd/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.DictDel(System.String,System.String[])">
            <summary>
            Delete terms from a dictionary.
            </summary>
            <param name="dict">The dictionary name</param>
            <param name="terms">Terms to delete to the dictionary..</param>
            <returns>The number of new terms that were deleted.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.dictdel/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.DictDump(System.String)">
            <summary>
            Dump all terms in the given dictionary.
            </summary>
            <param name="dict">The dictionary name</param>
            <returns>An array, where each element is term.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.dictdump/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.DropIndex(System.String,System.Boolean)">
            <summary>
            Delete an index.
            </summary>
            <param name="indexName">The index name</param>
            <param name="dd">If set, deletes the actual document hashes.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.dropindex/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.Explain(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Return the execution plan for a complex query
            </summary>
            <param name="indexName">The index name</param>
            <param name="query">The query to explain</param>
            <param name="dialect">Dialect version under which to execute the query</param>
            <returns>String that representing the execution plan</returns>
            <remarks><seealso href="https://redis.io/commands/ft.explain/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.ExplainCli(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Return the execution plan for a complex query
            </summary>
            <param name="indexName">The index name</param>
            <param name="query">The query to explain</param>
            <param name="dialect">Dialect version under which to execute the query</param>
            <returns>An array reply with a string representing the execution plan</returns>
            <remarks><seealso href="https://redis.io/commands/ft.explaincli/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.Info(StackExchange.Redis.RedisValue)">
            <summary>
            Return information and statistics on the index.
            </summary>
            <param name="key">The name of the index.</param>
            <returns>Dictionary of key and value with information about the index</returns>
            <remarks><seealso href="https://redis.io/commands/ft.info"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.ProfileSearch(System.String,NRedisStack.Search.Query,System.Boolean)">
            <summary>
            Apply FT.SEARCH command to collect performance details.
            </summary>
            <param name="indexName">The index name, created using FT.CREATE.</param>
            <param name="q">The query string.</param>
            <param name="limited">Removes details of reader iterator.</param>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.ISearchCommands.ProfileAggregate(System.String,NRedisStack.Search.Aggregation.AggregationRequest,System.Boolean)">
            <summary>
            Apply FT.AGGREGATE command to collect performance details.
            </summary>
            <param name="indexName">The index name, created using FT.CREATE.</param>
            <param name="query">The query string.</param>
            <param name="limited">Removes details of reader iterator.</param>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.ISearchCommands.Search(System.String,NRedisStack.Search.Query)">
            <summary>
            Search the index
            </summary>
            <param name="indexName">The index name</param>
            <param name="q">a <see cref="T:NRedisStack.Search.Query"/> object with the query string and optional parameters</param>
            <returns>a <see cref="T:NRedisStack.Search.SearchResult"/> object with the results</returns>
            <remarks><seealso href="https://redis.io/commands/ft.search"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.SynDump(System.String)">
            <summary>
            Dump the contents of a synonym group.
            </summary>
            <param name="indexName">The index name</param>
            <returns>Pairs of term and an array of synonym groups.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.syndump"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.SpellCheck(System.String,System.String,NRedisStack.Search.FTSpellCheckParams)">
            <summary>
            Perform spelling correction on a query, returning suggestions for misspelled terms.
            </summary>
            <param name="indexName">is index with the indexed terms.</param>
            <param name="query">is search query.</param>
            <param name="spellCheckParams">Optional Spellcheck Parameters</param>
            <returns>An array reply, in which each element represents a misspelled term from the query.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.spellcheck"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.SugAdd(System.String,System.String,System.Double,System.Boolean,System.String)">
            <summary>
            Add a suggestion string to an auto-complete suggestion dictionary
            </summary>
            <param name="key">is suggestion dictionary key.</param>
            <param name="str">is suggestion string to index.</param>
            <param name="score">is floating point number of the suggestion string's weight.</param>
            <param name="increment">increments the existing entry of the suggestion by the given score,
             instead of replacing the score.</param>
            <param name="payload">saves an extra payload with the suggestion, that can be fetched by adding the WITHPAYLOADS argument to FT.SUGGET.</param>
            <returns>The current size of the suggestion dictionary.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.sugadd"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.SugDel(System.String,System.String)">
            <summary>
            Delete a string from a suggestion index.
            </summary>
            <param name="key">is suggestion dictionary key.</param>
            <param name="str">is suggestion string to index.</param>
            <returns><see langword="true"/> if the string was found and deleted, <see langword="false"/> otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.sugdel"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.SugGet(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Get completion suggestions for a prefix.
            </summary>
            <param name="key">is suggestion dictionary key.</param>
            <param name="prefix">is prefix to complete on.</param>
            <param name="fuzzy">performs a fuzzy prefix search,
            including prefixes at Levenshtein distance of 1 from the prefix sent.</param>
            <param name="withPayloads">returns optional payloads saved along with the suggestions.</param>
            <param name="max">limits the results to a maximum of num (default: 5).</param>
            <returns>List of the top suggestions matching the prefix.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.sugget"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.SugGetWithScores(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Get completion suggestions for a prefix with the score of each suggestion.
            </summary>
            <param name="key">is suggestion dictionary key.</param>
            <param name="prefix">is prefix to complete on.</param>
            <param name="fuzzy">performs a fuzzy prefix search,
            including prefixes at Levenshtein distance of 1 from the prefix sent.</param>
            <param name="withPayloads">returns optional payloads saved along with the suggestions.</param>
            <param name="max">limits the results to a maximum of num (default: 5).</param>
            <returns>List of the top suggestions matching the prefix.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.sugget"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.SugLen(System.String)">
            <summary>
            Get the size of an auto-complete suggestion dictionary.
            </summary>
            <param name="key">is suggestion dictionary key.</param>
            <returns>The current size of the suggestion dictionary.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.suglen"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.SynUpdate(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Update a synonym group.
            </summary>
            <param name="indexName">The index name</param>
            <param name="synonymGroupId">Is synonym group to return</param>
            <param name="skipInitialScan">does not scan and index, and only documents
            that are indexed after the update are affected</param>
            <param name="terms">The terms</param>
            <returns>Pairs of term and an array of synonym groups.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.synupdate"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommands.TagVals(System.String,System.String)">
            <summary>
            Return a distinct set of values indexed in a Tag field.
            </summary>
            <param name="indexName">The index name</param>
            <param name="fieldName">TAG field name</param>
            <returns>List of TAG field values</returns>
            <remarks><seealso href="https://redis.io/commands/ft.tagvals"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync._ListAsync">
            <summary>
            Returns a list of all existing indexes.
            </summary>
            <returns>Array with index names.</returns>
            <remarks><seealso href="https://redis.io/commands/ft._list"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.AggregateAsync(System.String,NRedisStack.Search.Aggregation.AggregationRequest)">
            <summary>
            Run a search query on an index, and perform aggregate transformations on the results.
            </summary>
            <param name="index">The index name.</param>
            <param name="query">The query</param>
            <returns>An <see langword="AggregationResult"/> object</returns>
            <remarks><seealso href="https://redis.io/commands/ft.aggregate"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.AliasAddAsync(System.String,System.String)">
            <summary>
            Add an alias to an index.
            </summary>
            <param name="alias">Alias to be added to an index.</param>
            <param name="index">The index name.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.aliasadd"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.AliasDelAsync(System.String)">
            <summary>
            Remove an alias to an index.
            </summary>
            <param name="alias">Alias to be removed.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.aliasdel"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.AliasUpdateAsync(System.String,System.String)">
            <summary>
            Add an alias to an index. If the alias is already associated with another index,
            FT.ALIASUPDATE removes the alias association with the previous index.
            </summary>
            <param name="alias">Alias to be removed.</param>
            <param name="index">The index name.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.aliasdel"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.AlterAsync(System.String,NRedisStack.Search.Schema,System.Boolean)">
            <summary>
            Add a new attribute to the index
            </summary>
            <param name="index">The index name.</param>
            <param name="skipInitialScan">If set, does not scan and index.</param>
            <param name="schema">the schema.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.alter"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.ConfigGetAsync(System.String)">
            <summary>
            Retrieve configuration options.
            </summary>
            <param name="option">is name of the configuration option, or '*' for all.</param>
            <returns>An array reply of the configuration name and value.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.config-get"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.ConfigSetAsync(System.String,System.String)">
            <summary>
            Describe configuration options.
            </summary>
            <param name="option">is name of the configuration option, or '*' for all.</param>
            <param name="value">is value of the configuration option.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.config-set"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.CreateAsync(System.String,NRedisStack.Search.FTCreateParams,NRedisStack.Search.Schema)">
            <summary>
            Create an index with the given specification.
            </summary>
            <param name="indexName">The index name.</param>
            <param name="parameters">Command's parameters.</param>
            <param name="schema">The index schema.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.create"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.CursorDelAsync(System.String,System.Int64)">
            <summary>
            Delete a cursor from the index.
            </summary>
            <param name="indexName">The index name</param>
            <param name="cursorId">The cursor's ID.</param>
            <returns><see langword="true"/> if it has been deleted, <see langword="false"/> if it did not exist.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.cursor-del/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.CursorReadAsync(System.String,System.Int64,System.Nullable{System.Int32})">
            <summary>
            Read next results from an existing cursor.
            </summary>
            <param name="indexName">The index name</param>
            <param name="cursorId">The cursor's ID.</param>
            <param name="count">Limit the amount of returned results.</param>
            <returns>A AggregationResult object with the results</returns>
            <remarks><seealso href="https://redis.io/commands/ft.cursor-read/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.DictAddAsync(System.String,System.String[])">
            <summary>
            Add terms to a dictionary.
            </summary>
            <param name="dict">The dictionary name</param>
            <param name="terms">Terms to add to the dictionary..</param>
            <returns>The number of new terms that were added.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.dictadd/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.DictDelAsync(System.String,System.String[])">
            <summary>
            Delete terms from a dictionary.
            </summary>
            <param name="dict">The dictionary name</param>
            <param name="terms">Terms to delete to the dictionary..</param>
            <returns>The number of new terms that were deleted.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.dictdel/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.DictDumpAsync(System.String)">
            <summary>
            Dump all terms in the given dictionary.
            </summary>
            <param name="dict">The dictionary name</param>
            <returns>An array, where each element is term.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.dictdump/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.DropIndexAsync(System.String,System.Boolean)">
            <summary>
            Delete an index.
            </summary>
            <param name="indexName">The index name</param>
            <param name="dd">If set, deletes the actual document hashes.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/ft.dropindex/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.ExplainAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Return the execution plan for a complex query
            </summary>
            <param name="indexName">The index name</param>
            <param name="query">The query to explain</param>
            <param name="dialect">Dialect version under which to execute the query</param>
            <returns>String that representing the execution plan</returns>
            <remarks><seealso href="https://redis.io/commands/ft.explain/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.ExplainCliAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Return the execution plan for a complex query
            </summary>
            <param name="indexName">The index name</param>
            <param name="query">The query to explain</param>
            <param name="dialect">Dialect version under which to execute the query</param>
            <returns>An array reply with a string representing the execution plan</returns>
            <remarks><seealso href="https://redis.io/commands/ft.explaincli/"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.InfoAsync(StackExchange.Redis.RedisValue)">
            <summary>
            Return information and statistics on the index.
            </summary>
            <param name="key">The name of the index.</param>
            <returns>Dictionary of key and value with information about the index</returns>
            <remarks><seealso href="https://redis.io/commands/ft.info"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.ProfileSearchAsync(System.String,NRedisStack.Search.Query,System.Boolean)">
            <summary>
            Apply FT.SEARCH command to collect performance details.
            </summary>
            <param name="indexName">The index name, created using FT.CREATE.</param>
            <param name="q">The query string.</param>
            <param name="limited">Removes details of reader iterator.</param>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.ProfileAggregateAsync(System.String,NRedisStack.Search.Aggregation.AggregationRequest,System.Boolean)">
            <summary>
            Apply FT.AGGREGATE command to collect performance details.
            </summary>
            <param name="indexName">The index name, created using FT.CREATE.</param>
            <param name="query">The query string.</param>
            <param name="limited">Removes details of reader iterator.</param>
            <returns></returns>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.SearchAsync(System.String,NRedisStack.Search.Query)">
            <summary>
            Search the index
            </summary>
            <param name="indexName">The index name</param>
            <param name="q">a <see cref="T:NRedisStack.Search.Query"/> object with the query string and optional parameters</param>
            <returns>a <see cref="T:NRedisStack.Search.SearchResult"/> object with the results</returns>
            <remarks><seealso href="https://redis.io/commands/ft.search"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.SpellCheckAsync(System.String,System.String,NRedisStack.Search.FTSpellCheckParams)">
             <summary>
             Perform spelling correction on a query, returning suggestions for misspelled terms.
             </summary>
             <param name="indexName">is index with the indexed terms.</param>
             <param name="query">is search query.</param>
             <param name="spellCheckParams">Optional Spellcheck Parameters</param>
             <returns>An array reply, in which each element represents a misspelled term from the query.</returns>
             <remarks><seealso href="https://redis.io/commands/ft.spellcheck]"/></remarks>
            
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.SugAddAsync(System.String,System.String,System.Double,System.Boolean,System.String)">
            <summary>
            Add a suggestion string to an auto-complete suggestion dictionary
            </summary>
            <param name="key">is suggestion dictionary key.</param>
            <param name="str">is suggestion string to index.</param>
            <param name="score">is floating point number of the suggestion string's weight.</param>
            <param name="increment">increments the existing entry of the suggestion by the given score,
             instead of replacing the score.</param>
            <param name="payload">saves an extra payload with the suggestion, that can be fetched by adding the WITHPAYLOADS argument to FT.SUGGET.</param>
            <returns>The current size of the suggestion dictionary.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.sugadd"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.SugDelAsync(System.String,System.String)">
            <summary>
            Delete a string from a suggestion index.
            </summary>
            <param name="key">is suggestion dictionary key.</param>
            <param name="str">is suggestion string to index.</param>
            <returns><see langword="true"/> if the string was found and deleted, <see langword="false"/> otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.sugdel"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.SugGetAsync(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Get completion suggestions for a prefix.
            </summary>
            <param name="key">is suggestion dictionary key.</param>
            <param name="prefix">is prefix to complete on.</param>
            <param name="fuzzy">performs a fuzzy prefix search,
            including prefixes at Levenshtein distance of 1 from the prefix sent.</param>
            <param name="withPayloads">returns optional payloads saved along with the suggestions.</param>
            <param name="max">limits the results to a maximum of num (default: 5).</param>
            <returns>List of the top suggestions matching the prefix.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.sugget"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.SugGetWithScoresAsync(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Get completion suggestions for a prefix with the score of each suggestion.
            </summary>
            <param name="key">is suggestion dictionary key.</param>
            <param name="prefix">is prefix to complete on.</param>
            <param name="fuzzy">performs a fuzzy prefix search,
            including prefixes at Levenshtein distance of 1 from the prefix sent.</param>
            <param name="withPayloads">returns optional payloads saved along with the suggestions.</param>
            <param name="max">limits the results to a maximum of num (default: 5).</param>
            <returns>List of the top suggestions matching the prefix.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.sugget"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.SugLenAsync(System.String)">
            <summary>
            Get the size of an auto-complete suggestion dictionary.
            </summary>
            <param name="key">is suggestion dictionary key.</param>
            <returns>The current size of the suggestion dictionary.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.suglen"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.SynDumpAsync(System.String)">
            <summary>
            Dump the contents of a synonym group.
            </summary>
            <param name="indexName">The index name</param>
            <returns>Pairs of term and an array of synonym groups.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.syndump"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.SynUpdateAsync(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Update a synonym group.
            </summary>
            <param name="indexName">The index name</param>
            <param name="synonymGroupId">Is synonym group to return</param>
            <param name="skipInitialScan">does not scan and index, and only documents
            that are indexed after the update are affected</param>
            <param name="terms">The terms</param>
            <returns>Pairs of term and an array of synonym groups.</returns>
            <remarks><seealso href="https://redis.io/commands/ft.synupdate"/></remarks>
        </member>
        <member name="M:NRedisStack.ISearchCommandsAsync.TagValsAsync(System.String,System.String)">
            <summary>
            Return a distinct set of values indexed in a Tag field.
            </summary>
            <param name="indexName">The index name</param>
            <param name="fieldName">TAG field name</param>
            <returns>List of TAG field values</returns>
            <remarks><seealso href="https://redis.io/commands/ft.tagvals"/></remarks>
        </member>
        <member name="M:NRedisStack.SearchCommands._List">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.Aggregate(System.String,NRedisStack.Search.Aggregation.AggregationRequest)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.AliasAdd(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.AliasDel(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.AliasUpdate(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.Alter(System.String,NRedisStack.Search.Schema,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.ConfigGet(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.ConfigSet(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.Create(System.String,NRedisStack.Search.FTCreateParams,NRedisStack.Search.Schema)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.Create(System.String,NRedisStack.Search.Schema)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.CursorDel(System.String,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.CursorRead(System.String,System.Int64,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.DictAdd(System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.DictDel(System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.DictDump(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.DropIndex(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.Explain(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.ExplainCli(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.Info(StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.ProfileSearch(System.String,NRedisStack.Search.Query,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.ProfileAggregate(System.String,NRedisStack.Search.Aggregation.AggregationRequest,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.Search(System.String,NRedisStack.Search.Query)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.SpellCheck(System.String,System.String,NRedisStack.Search.FTSpellCheckParams)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.SugAdd(System.String,System.String,System.Double,System.Boolean,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.SugDel(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.SugGet(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.SugGetWithScores(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.SugLen(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.SynDump(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.SynUpdate(System.String,System.String,System.Boolean,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommands.TagVals(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync._ListAsync">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.AggregateAsync(System.String,NRedisStack.Search.Aggregation.AggregationRequest)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.AliasAddAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.AliasDelAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.AliasUpdateAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.AlterAsync(System.String,NRedisStack.Search.Schema,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.ConfigGetAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.ConfigSetAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.CreateAsync(System.String,NRedisStack.Search.FTCreateParams,NRedisStack.Search.Schema)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.CreateAsync(System.String,NRedisStack.Search.Schema)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.CursorDelAsync(System.String,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.CursorReadAsync(System.String,System.Int64,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.DictAddAsync(System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.DictDelAsync(System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.DictDumpAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.DropIndexAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.ExplainAsync(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.ExplainCliAsync(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.InfoAsync(StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.ProfileSearchAsync(System.String,NRedisStack.Search.Query,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.ProfileAggregateAsync(System.String,NRedisStack.Search.Aggregation.AggregationRequest,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.SearchAsync(System.String,NRedisStack.Search.Query)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.SpellCheckAsync(System.String,System.String,NRedisStack.Search.FTSpellCheckParams)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.SugAddAsync(System.String,System.String,System.Double,System.Boolean,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.SugDelAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.SugGetAsync(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.SugGetWithScoresAsync(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.SugLenAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.SynDumpAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.SynUpdateAsync(System.String,System.String,System.Boolean,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.SearchCommandsAsync.TagValsAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NRedisStack.Tdigest.DataTypes.TdigestInformation">
            <summary>
            This class represents the response for TDIGEST.INFO command.
            This object has Read-only properties and cannot be generated outside a TDIGEST.INFO response.
            </summary>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.Add(StackExchange.Redis.RedisKey,System.Double[])">
            <summary>
            Adds one or more observations to a t-digest sketch.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="values">The value of the observation.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.add"/></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.ITdigestCommands.CDF(StackExchange.Redis.RedisKey,System.Double[])" -->
        <member name="M:NRedisStack.ITdigestCommands.Create(StackExchange.Redis.RedisKey,System.Int64)">
            <summary>
            Allocate memory and initialize a t-digest sketch.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="compression">The compression parameter.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.create"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.Info(StackExchange.Redis.RedisKey)">
            <summary>
            Returns information about a sketch.
            </summary>
            <param name="key">The name of the sketch.</param>
            <returns>information about a sketch</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.info"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.Max(StackExchange.Redis.RedisKey)">
            <summary>
            Get the maximum observation value from the sketch.
            </summary>
            <param name="key">The name of the sketch.</param>
            <returns>the maximum observation value from the sketch</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.max"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.Min(StackExchange.Redis.RedisKey)">
            <summary>
            Get the minimum observation value from the sketch.
            </summary>
            <param name="key">The name of the sketch.</param>
            <returns>the minimum observation value from the sketch</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.min"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.Merge(StackExchange.Redis.RedisKey,System.Int64,System.Boolean,StackExchange.Redis.RedisKey[])">
            <summary>
            Merges all of the values from 'from' keys to 'destination-key' sketch
            </summary>
            <param name="destinationKey">TSketch to copy observation values to (a t-digest data structure).</param>
            <param name="compression">The compression parameter.</param>
            <param name="overide">If destination already exists, it is overwritten.</param>
            <param name="sourceKeys">Sketch to copy observation values from (a t-digest data structure).</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.merge"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.Quantile(StackExchange.Redis.RedisKey,System.Double[])">
            <summary>
            Returns estimates of one or more cutoffs such that a specified fraction of the observations
            added to this t-digest would be less than or equal to each of the specified cutoffs.
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <param name="quantile">The desired fraction (between 0 and 1 inclusively).</param>
            <returns>An  array of results populated with quantile_1, cutoff_1, quantile_2, cutoff_2, ..., quantile_N, cutoff_N.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.quantile"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.Rank(StackExchange.Redis.RedisKey,System.Int64[])">
            <summary>
            Retrieve the estimated rank of value (the number of observations in the sketch
            that are smaller than value + half the number of observations that are equal to value).
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <param name="values">input value, for which the rank will be determined.</param>
            <returns>an array of results populated with rank_1, rank_2, ..., rank_N.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.rank"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.RevRank(StackExchange.Redis.RedisKey,System.Int64[])">
            <summary>
            Retrieve the estimated rank of value (the number of observations in the sketch
            that are larger than value + half the number of observations that are equal to value).
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <param name="values">input value, for which the rank will be determined.</param>
            <returns>an array of results populated with rank_1, rank_2, ..., rank_N.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.revrank"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.ByRank(StackExchange.Redis.RedisKey,System.Int64[])">
            <summary>
            Retrieve an estimation of the value with the given the rank.
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <param name="ranks">input rank, for which the value will be determined.</param>
            <returns>an array of results populated with value_1, value_2, ..., value_N.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.byrank"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.ByRevRank(StackExchange.Redis.RedisKey,System.Int64[])">
            <summary>
            Retrieve an estimation of the value with the given the reverse rank.
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <param name="ranks">input reverse rank, for which the value will be determined.</param>
            <returns>an array of results populated with value_1, value_2, ..., value_N.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.byrevrank"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.Reset(StackExchange.Redis.RedisKey)">
            <summary>
            Reset the sketch - empty the sketch and re-initialize it
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <returns><see langword="true"/> if executed correctly, error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.reset"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommands.TrimmedMean(StackExchange.Redis.RedisKey,System.Double,System.Double)">
            <summary>
            Reset the sketch - empty the sketch and re-initialize it
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <param name="lowCutQuantile">Exclude observation values lower than this quantile.</param>
            <param name="highCutQuantile">Exclude observation values higher than this quantile.</param>
            <returns>estimation of the mean value. Will return NaN if the sketch is empty.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.trimmed_mean"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.AddAsync(StackExchange.Redis.RedisKey,System.Double[])">
            <summary>
            Adds one or more observations to a t-digest sketch.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="values">The value of the observation.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.add"/></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NRedisStack.ITdigestCommandsAsync.CDFAsync(StackExchange.Redis.RedisKey,System.Double[])" -->
        <member name="M:NRedisStack.ITdigestCommandsAsync.CreateAsync(StackExchange.Redis.RedisKey,System.Int64)">
            <summary>
            Allocate memory and initialize a t-digest sketch.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="compression">The compression parameter.</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.create"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.InfoAsync(StackExchange.Redis.RedisKey)">
            <summary>
            Returns information about a sketch.
            </summary>
            <param name="key">The name of the sketch.</param>
            <returns>information about a sketch</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.info"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.MaxAsync(StackExchange.Redis.RedisKey)">
            <summary>
            Get the maximum observation value from the sketch.
            </summary>
            <param name="key">The name of the sketch.</param>
            <returns>the maximum observation value from the sketch</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.max"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.MinAsync(StackExchange.Redis.RedisKey)">
            <summary>
            Get the minimum observation value from the sketch.
            </summary>
            <param name="key">The name of the sketch.</param>
            <returns>the minimum observation value from the sketch</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.min"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.MergeAsync(StackExchange.Redis.RedisKey,System.Int64,System.Boolean,StackExchange.Redis.RedisKey[])">
            <summary>
            Merges all of the values from 'from' keys to 'destination-key' sketch
            </summary>
            <param name="destinationKey">TSketch to copy observation values to (a t-digest data structure).</param>
            <param name="compression">The compression parameter.</param>
            <param name="overide">If destination already exists, it is overwritten.</param>
            <param name="sourceKeys">Sketch to copy observation values from (a t-digest data structure).</param>
            <returns><see langword="true"/> if executed correctly, error otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.merge"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.QuantileAsync(StackExchange.Redis.RedisKey,System.Double[])">
             <summary>
             Returns estimates of one or more cutoffs such that a specified fraction of the observations
            added to this t-digest would be less than or equal to each of the specified cutoffs.
             </summary>
             <param name="key">The name of the sketch (a t-digest data structure).</param>
             <param name="quantile">The desired fraction (between 0 and 1 inclusively).</param>
             <returns>An  array of results populated with quantile_1, cutoff_1, quantile_2, cutoff_2, ..., quantile_N, cutoff_N.</returns>
             <remarks><seealso href="https://redis.io/commands/tdigest.quantile"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.RankAsync(StackExchange.Redis.RedisKey,System.Int64[])">
            <summary>
            Retrieve the estimated rank of value (the number of observations in the sketch
            that are smaller than value + half the number of observations that are equal to value).
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <param name="values">input value, for which the rank will be determined.</param>
            <returns>an array of results populated with rank_1, rank_2, ..., rank_N.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.rank"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.RevRankAsync(StackExchange.Redis.RedisKey,System.Int64[])">
            <summary>
            Retrieve the estimated rank of value (the number of observations in the sketch
            that are larger than value + half the number of observations that are equal to value).
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <param name="values">input value, for which the rank will be determined.</param>
            <returns>an array of results populated with rank_1, rank_2, ..., rank_N.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.revrank"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.ByRankAsync(StackExchange.Redis.RedisKey,System.Int64[])">
            <summary>
            Retrieve an estimation of the value with the given the rank.
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <param name="ranks">input rank, for which the value will be determined.</param>
            <returns>an array of results populated with value_1, value_2, ..., value_N.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.byrank"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.ByRevRankAsync(StackExchange.Redis.RedisKey,System.Int64[])">
            <summary>
            Retrieve an estimation of the value with the given the reverse rank.
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <param name="ranks">input reverse rank, for which the value will be determined.</param>
            <returns>an array of results populated with value_1, value_2, ..., value_N.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.byrevrank"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.ResetAsync(StackExchange.Redis.RedisKey)">
            <summary>
            Reset the sketch - empty the sketch and re-initialize it
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <returns><see langword="true"/> if executed correctly, error otherwise.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.reset"/></remarks>
        </member>
        <member name="M:NRedisStack.ITdigestCommandsAsync.TrimmedMeanAsync(StackExchange.Redis.RedisKey,System.Double,System.Double)">
            <summary>
            Reset the sketch - empty the sketch and re-initialize it
            </summary>
            <param name="key">The name of the sketch (a t-digest data structure).</param>
            <param name="lowCutQuantile">Exclude observation values lower than this quantile.</param>
            <param name="highCutQuantile">Exclude observation values higher than this quantile.</param>
            <returns>estimation of the mean value. Will return NaN if the sketch is empty.</returns>
            <remarks><seealso href="https://redis.io/commands/tdigest.trimmed_mean"/></remarks>
        </member>
        <member name="T:NRedisStack.Literals.Enums.TsAggregation">
            <summary>
            An aggregation type to be used with a time bucket.
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.Avg">
            <summary>
            The average of all samples in the aggregation
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.Sum">
            <summary>
            A sum of all samples in the aggregation
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.Min">
            <summary>
            A minimum sample of all samples in the aggregation
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.Max">
            <summary>
            A maximum sample of all samples in the aggregation
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.Range">
            <summary>
            A range of the min and max sample of all samples in the aggregation (range r = max-min)
            For example if the min sample was 100 and the max was 400, the range aggregation would return 300
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.Count">
            <summary>
            The total number of all samples in the aggregation
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.First">
            <summary>
            The first sample in the aggregation
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.Last">
            <summary>
            The last sample in the aggregation
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.StdP">
            <summary>
            The standard deviation based on the entire population
            The standard deviation is a measure of how widely values are dispersed from the average sample in the aggregation
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.StdS">
            <summary>
            The standard deviation based on a sample of the population
            The standard deviation is a measure of how widely values are dispersed from the average sample in the aggregation
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.VarP">
            <summary>
            The variance based on the entire population
            The variance is the average of the squared differences from the mean
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.VarS">
            <summary>
            The variance based on a sample of the population
            The variance is the average of the squared differences from the mean
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsAggregation.Twa">
            <summary>
            Time-weighted average of all values
            </summary>
        </member>
        <member name="T:NRedisStack.Literals.Enums.TsBucketTimestamps">
            <summary>
            controls how bucket timestamps are reported.
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsBucketTimestamps.low">
            <summary>
            Timestamp is the start time (default)
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsBucketTimestamps.mid">
            <summary>
            Timestamp is the mid time (rounded down if not an integer)
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsBucketTimestamps.high">
            <summary>
            Timestamp is the end time
            </summary>
        </member>
        <member name="T:NRedisStack.Literals.Enums.TsDuplicatePolicy">
            <summary>
            Policy to handle duplicate samples.
            The default policy for database-wide is BLOCK.
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsDuplicatePolicy.BLOCK">
            <summary>
            An error will occur for any out of order sample.
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsDuplicatePolicy.FIRST">
            <summary>
            Ignore the new value.
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsDuplicatePolicy.LAST">
            <summary>
            Override with latest value.
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsDuplicatePolicy.MIN">
            <summary>
            Only override if the value is lower than the existing value.
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsDuplicatePolicy.MAX">
            <summary>
            Only override if the value is higher than the existing value.
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsDuplicatePolicy.SUM">
            <summary>
            If a previous sample exists, add the new sample to it so that the updated value is equal to (previous + new).
            If no previous sample exists, set the updated value equal to the new value.
            </summary>
        </member>
        <member name="T:NRedisStack.Literals.Enums.TsReduce">
            <summary>
            reducer type used to aggregate series that share the same label value.
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsReduce.Sum">
            <summary>
            A sum of all samples in the group
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsReduce.Min">
            <summary>
            A minimum sample of all samples in the group
            </summary>
        </member>
        <member name="F:NRedisStack.Literals.Enums.TsReduce.Max">
            <summary>
            A maximum sample of all samples in the group
            </summary>
        </member>
        <member name="M:NRedisStack.TdigestCommands.Add(StackExchange.Redis.RedisKey,System.Double[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.CDF(StackExchange.Redis.RedisKey,System.Double[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.Create(StackExchange.Redis.RedisKey,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.Info(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.Max(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.Min(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.Merge(StackExchange.Redis.RedisKey,System.Int64,System.Boolean,StackExchange.Redis.RedisKey[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.Quantile(StackExchange.Redis.RedisKey,System.Double[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.Rank(StackExchange.Redis.RedisKey,System.Int64[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.RevRank(StackExchange.Redis.RedisKey,System.Int64[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.ByRank(StackExchange.Redis.RedisKey,System.Int64[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.ByRevRank(StackExchange.Redis.RedisKey,System.Int64[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.Reset(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommands.TrimmedMean(StackExchange.Redis.RedisKey,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.AddAsync(StackExchange.Redis.RedisKey,System.Double[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.CDFAsync(StackExchange.Redis.RedisKey,System.Double[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.CreateAsync(StackExchange.Redis.RedisKey,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.InfoAsync(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.MaxAsync(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.MinAsync(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.MergeAsync(StackExchange.Redis.RedisKey,System.Int64,System.Boolean,StackExchange.Redis.RedisKey[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.QuantileAsync(StackExchange.Redis.RedisKey,System.Double[])">
            added to this t-digest would be less than or equal to each of the specified cutoffs.
             <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.RankAsync(StackExchange.Redis.RedisKey,System.Int64[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.RevRankAsync(StackExchange.Redis.RedisKey,System.Int64[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.ByRankAsync(StackExchange.Redis.RedisKey,System.Int64[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.ByRevRankAsync(StackExchange.Redis.RedisKey,System.Int64[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.ResetAsync(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TdigestCommandsAsync.TrimmedMeanAsync(StackExchange.Redis.RedisKey,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:NRedisStack.DataTypes.TimeSeriesChunck">
            <summary>
            A key-value pair class represetns metadata label of time-series.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesChunck.StartTimestamp">
            <summary>
            First timestamp present in the chunk
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesChunck.EndTimestamp">
            <summary>
            Last timestamp present in the chunk
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesChunck.Samples">
            <summary>
            Total number of samples in the chunk
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesChunck.Size">
            <summary>
            The chunk data size in bytes. This is the exact size that used for
            data only inside the chunk. It does not include other overheads.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesChunck.BytesPerSample">
            <summary>
            Ratio of size and samples
            </summary>
        </member>
        <member name="T:NRedisStack.DataTypes.TimeSeriesInformation">
            <summary>
            This class represents the response for TS.INFO command.
            This object has Read-only properties and cannot be generated outside a TS.INFO response.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.TotalSamples">
            <summary>
            Total samples in the time-series.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.MemoryUsage">
            <summary>
            Total number of bytes allocated for the time-series.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.FirstTimeStamp">
            <summary>
            First timestamp present in the time-series.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.LastTimeStamp">
            <summary>
            Last timestamp present in the time-series.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.RetentionTime">
            <summary>
            Retention time, in milliseconds, for the time-series.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.ChunkCount">
            <summary>
            Number of Memory Chunks used for the time-series.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.MaxSamplesPerChunk">
            <summary>
            Maximum Number of samples per Memory Chunk.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.ChunkSize">
            <summary>
            Memory Chunk size in Bytes.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.Labels">
            <summary>
            A readonly list of TimeSeriesLabel that represent metadata labels of the time-series.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.SourceKey">
            <summary>
            Source key for the queries time series key.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.Rules">
            <summary>
            A readonly list of TimeSeriesRules that represent compaction Rules of the time-series.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.DuplicatePolicy">
            <summary>
            The policy will define handling of duplicate samples.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.KeySelfName">
            <summary>
            In DEBUG mode: Key self name.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesInformation.Chunks">
            <summary>
            In DEBUG mode: gives more information about the chunks
            </summary>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesInformation.op_Implicit(NRedisStack.DataTypes.TimeSeriesInformation)~System.String">
            <summary>
            Implicit cast from TimeSeriesInformation to string.
            </summary>
            <param name="info">TimeSeriesInformation</param>
        </member>
        <member name="T:NRedisStack.DataTypes.TimeSeriesLabel">
            <summary>
            A key-value pair class represetns metadata label of time-series.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesLabel.Key">
            <summary>
            Label key
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesLabel.Value">
            <summary>
            Label value
            </summary>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesLabel.#ctor(System.String,System.String)">
            <summary>
            Create a new TimeSeriesLabel out of key and value strings.
            </summary>
            <param name="key">Key string</param>
            <param name="value">Value string</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesLabel.Equals(System.Object)">
            <summary>
            Equality of TimeSeriesLabel objects
            </summary>
            <param name="obj">Object to compare</param>
            <returns>If two TimeSeriesLabel objects are equal</returns>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesLabel.op_Implicit(NRedisStack.DataTypes.TimeSeriesLabel)~System.String">
            <summary>
            Implicit cast from TimeSeriesLabel to string.
            </summary>
            <param name="tsl">TimeSeriesLabel</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesLabel.GetHashCode">
            <summary>
            TimeSeriesLabel object hash code.
            </summary>
            <returns>TimeSeriesLabel object hash code.</returns>
        </member>
        <member name="T:NRedisStack.DataTypes.TimeSeriesRule">
            <summary>
            A class that represents time-series aggregation rule.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesRule.DestKey">
            <summary>
            Rule's destination key.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesRule.TimeBucket">
            <summary>
            Rule's aggregation time bucket.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesRule.Aggregation">
            <summary>
            Rule's aggregation type.
            </summary>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesRule.#ctor(System.String,System.Int64,NRedisStack.Literals.Enums.TsAggregation)">
            <summary>
            Builds a time-series aggregation rule
            </summary>
            <param name="destKey">Rule's destination key.</param>
            <param name="timeBucket">Rule's aggregation time bucket.</param>
            <param name="aggregation">Rule's aggregation type.</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesRule.Equals(System.Object)">
            <summary>
            Equality of TimeSeriesRule objects
            </summary>
            <param name="obj">Object to compare</param>
            <returns>If two TimeSeriesRule objects are equal</returns>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesRule.op_Implicit(NRedisStack.DataTypes.TimeSeriesRule)~System.String">
            <summary>
            Implicit cast from TimeSeriesRule to string.
            </summary>
            <param name="tsr">TimeSeriesRule</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesRule.GetHashCode">
            <summary>
            TimeSeriesRule object hash code.
            </summary>
            <returns>TimeSeriesRule object hash code.</returns>
        </member>
        <member name="T:NRedisStack.DataTypes.TimeSeriesTuple">
            <summary>
            A class represents time-series timestamp-value pair
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesTuple.Time">
            <summary>
            Tuple key - timestamp.
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeSeriesTuple.Val">
            <summary>
            Tuple value
            </summary>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesTuple.#ctor(NRedisStack.DataTypes.TimeStamp,System.Double)">
            <summary>
            Create new TimeSeriesTuple.
            </summary>
            <param name="time">Timestamp</param>
            <param name="val">Value</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesTuple.Equals(System.Object)">
            <summary>
            Equality of TimeSeriesTuple objects
            </summary>
            <param name="obj">Object to compare</param>
            <returns>If two TimeSeriesTuple objects are equal</returns>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesTuple.op_Implicit(NRedisStack.DataTypes.TimeSeriesTuple)~System.String">
            <summary>
            Implicit cast from TimeSeriesTuple to string.
            </summary>
            <param name="tst">TimeSeriesTuple</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeSeriesTuple.GetHashCode">
            <summary>
            TimeSeriesTuple object hash code.
            </summary>
            <returns>TimeSeriesTuple object hash code.</returns>
        </member>
        <member name="T:NRedisStack.DataTypes.TimeStamp">
            <summary>
            A class represents timestamp.
            Value can be either primitive long, DateTime or one of the strings "-", "+", "*".
            </summary>
        </member>
        <member name="P:NRedisStack.DataTypes.TimeStamp.Value">
            <summary>
            TimeStamp value.
            </summary>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeStamp.#ctor(System.Int64)">
            <summary>
            Build a TimeStamp from primitive long.
            </summary>
            <param name="timestamp">long value</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeStamp.#ctor(System.DateTime)">
            <summary>
            Build a TimeStamp from DateTime.
            </summary>
            <param name="dateTime">DateTime value</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeStamp.#ctor(System.String)">
            <summary>
            Build a TimeStamp from one of the strings "-", "+", "*".
            If the string is none of the above a NotSupportedException is thrown.
            </summary>
            <param name="timestamp">String value</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeStamp.op_Implicit(System.Int64)~NRedisStack.DataTypes.TimeStamp">
            <summary>
            Implicit cast from long to TimeStamp.
            </summary>
            <param name="l">long value.</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeStamp.op_Implicit(NRedisStack.DataTypes.TimeStamp)~System.Int64">
            <summary>
            Implicit cast from TimeStamp to long.
            If the underlying timestamp value is not long or DateTime, an InvalidCastException is thrown.
            </summary>
            <param name="ts">TimeStamp</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeStamp.op_Implicit(System.String)~NRedisStack.DataTypes.TimeStamp">
            <summary>
            Implicit cast from string to TimeStamp.
            Calls the string C'tor.
            </summary>
            <param name="s">String value</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeStamp.op_Implicit(NRedisStack.DataTypes.TimeStamp)~System.String">
            <summary>
            Implicit cast from TimeStamp to string.
            </summary>
            <param name="ts">TimeStamp</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeStamp.op_Implicit(System.DateTime)~NRedisStack.DataTypes.TimeStamp">
            <summary>
            Implicit cast from DateTime to TimeStamp.
            </summary>
            <param name="dateTime">DateTime value</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeStamp.op_Implicit(NRedisStack.DataTypes.TimeStamp)~System.DateTime">
            <summary>
            Implicit cast from TimeStamp to DateTime.
            </summary>
            <param name="timeStamp">TimeStamp</param>
        </member>
        <member name="M:NRedisStack.DataTypes.TimeStamp.GetHashCode">
            <summary>
            TimeStamp object hash code.
            </summary>
            <returns>TimeStamp object hash code.</returns>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.Create(System.String,System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy})">
            <summary>
            Create a new time-series.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="retentionTime">Optional: Maximum age for samples compared to last event time (in milliseconds)</param>
            <param name="labels">Optional: Collaction of label-value pairs that represent metadata labels of the key</param>
            <param name="uncompressed">Optional: Adding this flag will keep data in an uncompressed form</param>
            <param name="chunkSizeBytes">Optional: Each time-series uses chunks of memory of fixed size for time series samples.
            You can alter the default TS_db chunk size by passing the chunk_size argument (in Bytes)</param>
            <param name="duplicatePolicy">Optinal: Define handling of duplicate samples behavior (avalible for RedisTimeseries >= 1.4)</param>
            <returns>If the operation executed successfully</returns>
            <remarks><seealso href="https://redis.io/commands/ts.create"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.Alter(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel})">
            <summary>
            Update the retention, labels of an existing key.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="retentionTime">Optional: Maximum age for samples compared to last event time (in milliseconds)</param>
            <param name="chunkSizeBytes">Optional: Each time-series uses chunks of memory of fixed size for time series samples.
            You can alter the default TS_db chunk size by passing the chunk_size argument (in Bytes)</param>
            <param name="duplicatePolicy">Optinal: Define handling of duplicate samples behavior (avalible for RedisTimeseries >= 1.4)</param>
            <param name="labels">Optional: Collaction of label-value pairs that represent metadata labels of the key</param>
            <returns>If the operation executed successfully</returns>
            <remarks><seealso href="https://redis.io/commands/ts.alter"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.Add(System.String,NRedisStack.DataTypes.TimeStamp,System.Double,System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy})">
            <summary>
            Append (or create and append) a new sample to the series.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="timestamp">TimeStamp to add. UNIX timestamp of the sample. * can be used for automatic timestamp (using the system clock)</param>
            <param name="value">Numeric data value of the sample.</param>
            <param name="retentionTime">Optional: Maximum age for samples compared to last event time (in milliseconds)</param>
            <param name="labels">Optional: Collaction of label-value pairs that represent metadata labels of the key</param>
            <param name="uncompressed">Optional: Adding this flag will keep data in an uncompressed form</param>
            <param name="chunkSizeBytes">Optional: Each time-series uses chunks of memory of fixed size for time series samples.
            You can alter the default TS_db chunk size by passing the chunk_size argument (in Bytes)</param>
            <param name="duplicatePolicy">Optioal: overwrite key and database configuration for DUPLICATE_POLICY</param>
            <returns>The timestamp value of the new sample</returns>
            <remarks><seealso href="https://redis.io/commands/ts.add"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.MAdd(System.Collections.Generic.IReadOnlyCollection{System.ValueTuple{System.String,NRedisStack.DataTypes.TimeStamp,System.Double}})">
            <summary>
            Append new samples to multiple series.
            </summary>
            <param name="sequence">An Collection of (key, timestamp, value) tuples </param>
            <returns>List of timestamps of the new samples</returns>
            <remarks><seealso href="https://redis.io/commands/ts.madd"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.IncrBy(System.String,System.Double,System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64})">
            <summary>
            Creates a new sample that increments the latest sample's value.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="value">Delta to add</param>
            <param name="timestamp">Optional: TimeStamp to add. UNIX timestamp of the sample. * can be used for automatic timestamp (using the system clock)</param>
            <param name="retentionTime">Optional: Maximum age for samples compared to last event time (in milliseconds)</param>
            <param name="labels">Optional: Collaction of label-value pairs that represent metadata labels of the key</param>
            <param name="uncompressed">Optional: Adding this flag will keep data in an uncompressed form</param>
            <param name="chunkSizeBytes">Optional: Each time-series uses chunks of memory of fixed size for time series samples.
            You can alter the default TS_db chunk size by passing the chunk_size argument (in Bytes)</param>
            <returns>The latests sample timestamp (updated sample)</returns>
            <remarks><seealso href="https://redis.io/commands/ts.incrby"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.DecrBy(System.String,System.Double,System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64})">
            <summary>
            Creates a new sample that decrements the latest sample's value.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="value">Delta to substract</param>
            <param name="timestamp">Optional: TimeStamp to add. UNIX timestamp of the sample. * can be used for automatic timestamp (using the system clock)</param>
            <param name="retentionTime">Optional: Maximum age for samples compared to last event time (in milliseconds)</param>
            <param name="labels">Optional: Collaction of label-value pairs that represent metadata labels of the key</param>
            <param name="uncompressed">Optional: Adding this flag will keep data in an uncompressed form</param>
            <param name="chunkSizeBytes">Optional: Each time-series uses chunks of memory of fixed size for time series samples.
            You can alter the default TS_db chunk size by passing the chunk_size argument (in Bytes)</param>
            <returns>The latests sample timestamp (updated sample)</returns>
            <remarks><seealso href="https://redis.io/commands/ts.decrby"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.Del(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp)">
            <summary>
            Delete data points for a given timeseries and interval range in the form of start and end delete timestamps.
            The given timestamp interval is closed (inclusive), meaning start and end data points will also be deleted.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="fromTimeStamp">Start timestamp for the range deletion.</param>
            <param name="toTimeStamp">End timestamp for the range deletion.</param>
            <returns>The count of deleted items</returns>
            <remarks><seealso href="https://redis.io/commands/ts.del"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.CreateRule(System.String,NRedisStack.DataTypes.TimeSeriesRule,System.Int64)">
            <summary>
            Create a compaction rule.
            </summary>
            <param name="sourceKey">Key name for source time series</param>
            <param name="rule">TimeSeries rule:
            Key name for destination time series, Aggregation type and Time bucket for aggregation in milliseconds</param>
            <param name="alignTimestamp">ensures that there is a bucket that starts
            exactly at alignTimestamp and aligns all other buckets accordingly.
            It is expressed in milliseconds. The default value is 0 aligned with the epoch</param>
            <returns>If the operation executed successfully</returns>
            <remarks><seealso href="https://redis.io/commands/ts.createrule"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.DeleteRule(System.String,System.String)">
            <summary>
            Deletes a compaction rule.
            </summary>
            <param name="sourceKey">Key name for source time series</param>
            <param name="destKey">Key name for destination time series</param>
            <returns>If the operation executed successfully</returns>
            <remarks><seealso href="https://redis.io/commands/ts.deleterule"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.Get(System.String,System.Boolean)">
            <summary>
            Get the last sample.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <returns>TimeSeriesTuple that represents the last sample. Null if the series is empty. </returns>
            <remarks><seealso href="https://redis.io/commands/ts.get"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.MGet(System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Get the last samples matching the specific filter.
            </summary>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <param name="filter">A sequence of filters</param>
            <param name="withLabels">Optional: Include in the reply the label-value pairs that represent metadata labels of the time-series</param>
            <param name="selectedLabels">Optional: returns a subset of the label-value pairs that represent metadata labels of the time series</param>
            <returns>The command returns the last sample for entries with labels matching the specified filter.</returns>
            <remarks><seealso href="https://redis.io/commands/ts.mget"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.Range(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean)">
            <summary>
            Query a range.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="fromTimeStamp">Start timestamp for the range query. "-" can be used to express the minimum possible timestamp.</param>
            <param name="toTimeStamp">End timestamp for range query, + can be used to express the maximum possible timestamp.</param>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <param name="filterByTs">Optional: List of timestamps to filter the result by specific timestamps</param>
            <param name="filterByValue">Optional: Filter result by value using minimum and maximum</param>
            <param name="count">Optional: Returned list size.</param>
            <param name="align">Optional: Timestamp for alignment control for aggregation.</param>
            <param name="aggregation">Optional: Aggregation type</param>
            <param name="timeBucket">Optional: Time bucket for aggregation in milliseconds</param>
            <param name="bt">Optional: controls how bucket timestamps are reported.</param>
            <param name="empty">Optional: when specified, reports aggregations also for empty buckets</param>
            <returns>A list of TimeSeriesTuple</returns>
            <remarks><seealso href="https://redis.io/commands/ts.range"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.RevRange(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean)">
            <summary>
            Query a range in reverse direction.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="fromTimeStamp">Start timestamp for the range query. "-" can be used to express the minimum possible timestamp.</param>
            <param name="toTimeStamp">End timestamp for range query, + can be used to express the maximum possible timestamp.</param>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <param name="filterByTs">Optional: List of timestamps to filter the result by specific timestamps</param>
            <param name="filterByValue">Optional: Filter result by value using minimum and maximum</param>
            <param name="count">Optional: Returned list size.</param>
            <param name="align">Optional: Timestamp for alignment control for aggregation.</param>
            <param name="aggregation">Optional: Aggregation type</param>
            <param name="timeBucket">Optional: Time bucket for aggregation in milliseconds</param>
            <param name="bt">Optional: controls how bucket timestamps are reported.</param>
            <param name="empty">Optional: when specified, reports aggregations also for empty buckets</param>
            <returns>A list of TimeSeriesTuple</returns>
            <remarks><seealso href="https://redis.io/commands/ts.revrange"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.MRange(NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean,System.Nullable{System.ValueTuple{System.String,NRedisStack.Literals.Enums.TsReduce}})">
            <summary>
            Query a timestamp range across multiple time-series by filters.
            </summary>
            <param name="fromTimeStamp"> Start timestamp for the range query. - can be used to express the minimum possible timestamp.</param>
            <param name="toTimeStamp">End timestamp for range query, + can be used to express the maximum possible timestamp.</param>
            <param name="filter">A sequence of filters</param>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <param name="filterByTs">Optional: List of timestamps to filter the result by specific timestamps</param>
            <param name="filterByValue">Optional: Filter result by value using minimum and maximum</param>
            <param name="withLabels">Optional: Include in the reply the label-value pairs that represent metadata labels of the time-series</param>
            <param name="selectLabels">Optional: Include in the reply only a subset of the key-value pair labels of a series.</param>
            <param name="count">Optional: Maximum number of returned results per time-series.</param>
            <param name="align">Optional: Timestamp for alignment control for aggregation.</param>
            <param name="aggregation">Optional: Aggregation type</param>
            <param name="timeBucket">Optional: Time bucket for aggregation in milliseconds</param>
            <param name="bt">Optional: controls how bucket timestamps are reported.</param>
            <param name="empty">Optional: when specified, reports aggregations also for empty buckets</param>
            <param name="groupbyTuple">Optional: Grouping by fields the results, and applying reducer functions on each group.</param>
            <returns>A list of (key, labels, values) tuples. Each tuple contains the key name, its labels and the values which satisfies the given range and filters.</returns>
            <remarks><seealso href="https://redis.io/commands/ts.mrange"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.MRevRange(NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean,System.Nullable{System.ValueTuple{System.String,NRedisStack.Literals.Enums.TsReduce}})">
            <summary>
            Query a timestamp range in reverse order across multiple time-series by filters.
            </summary>
            <param name="fromTimeStamp"> Start timestamp for the range query. - can be used to express the minimum possible timestamp.</param>
            <param name="toTimeStamp">End timestamp for range query, + can be used to express the maximum possible timestamp.</param>
            <param name="filter">A sequence of filters</param>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <param name="filterByTs">Optional: List of timestamps to filter the result by specific timestamps</param>
            <param name="filterByValue">Optional: Filter result by value using minimum and maximum</param>
            <param name="withLabels">Optional: Include in the reply the label-value pairs that represent metadata labels of the time-series</param>
            <param name="selectLabels">Optional: Include in the reply only a subset of the key-value pair labels of a series.</param>
            <param name="count">Optional: Maximum number of returned results per time-series.</param>
            <param name="align">Optional: Timestamp for alignment control for aggregation.</param>
            <param name="aggregation">Optional: Aggregation type</param>
            <param name="timeBucket">Optional: Time bucket for aggregation in milliseconds</param>
            <param name="bt">Optional: controls how bucket timestamps are reported.</param>
            <param name="empty">Optional: when specified, reports aggregations also for empty buckets</param>
            <param name="groupbyTuple">Optional: Grouping by fields the results, and applying reducer functions on each group.</param>
            <returns>A list of (key, labels, values) tuples. Each tuple contains the key name, its labels and the values which satisfies the given range and filters.</returns>
            <remarks><seealso href="https://redis.io/commands/ts.mrevrange"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.Info(System.String,System.Boolean)">
            <summary>
            Returns the information for a specific time-series key.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="debug">An optional flag to get a more detailed information about the chunks.</param>
            <returns>TimeSeriesInformation for the specific key.</returns>
            <remarks><seealso href="https://redis.io/commands/ts.info"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommands.QueryIndex(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Get all the keys matching the filter list.
            </summary>
            <param name="filter">A sequence of filters</param>
            <returns>A list of keys with labels matching the filters.</returns>
            <remarks><seealso href="https://redis.io/commands/ts.queryindex"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.CreateAsync(System.String,System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy})">
            <summary>
            Create a new time-series.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="retentionTime">Optional: Maximum age for samples compared to last event time (in milliseconds)</param>
            <param name="labels">Optional: Collaction of label-value pairs that represent metadata labels of the key</param>
            <param name="uncompressed">Optional: Adding this flag will keep data in an uncompressed form</param>
            <param name="chunkSizeBytes">Optional: Each time-series uses chunks of memory of fixed size for time series samples.
            You can alter the default TS_db chunk size by passing the chunk_size argument (in Bytes)</param>
            <param name="duplicatePolicy">Optinal: Define handling of duplicate samples behavior (avalible for RedisTimeseries >= 1.4)</param>
            <returns>If the operation executed successfully</returns>
            <remarks><seealso href="https://redis.io/commands/ts.create"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.AlterAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel})">
            <summary>
            Update the retention, labels of an existing key.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="retentionTime">Optional: Maximum age for samples compared to last event time (in milliseconds)</param>
            <param name="chunkSizeBytes">Optional: Each time-series uses chunks of memory of fixed size for time series samples.
            You can alter the default TS_db chunk size by passing the chunk_size argument (in Bytes)</param>
            <param name="duplicatePolicy">Optinal: Define handling of duplicate samples behavior (avalible for RedisTimeseries >= 1.4)</param>
            <param name="labels">Optional: Collaction of label-value pairs that represent metadata labels of the key</param>
            <returns>If the operation executed successfully</returns>
            <remarks><seealso href="https://redis.io/commands/ts.alter"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.AddAsync(System.String,NRedisStack.DataTypes.TimeStamp,System.Double,System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy})">
            <summary>
            Append (or create and append) a new sample to the series.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="timestamp">TimeStamp to add. UNIX timestamp of the sample. * can be used for automatic timestamp (using the system clock)</param>
            <param name="value">Numeric data value of the sample.</param>
            <param name="retentionTime">Optional: Maximum age for samples compared to last event time (in milliseconds)</param>
            <param name="labels">Optional: Collaction of label-value pairs that represent metadata labels of the key</param>
            <param name="uncompressed">Optional: Adding this flag will keep data in an uncompressed form</param>
            <param name="chunkSizeBytes">Optional: Each time-series uses chunks of memory of fixed size for time series samples.
            You can alter the default TS_db chunk size by passing the chunk_size argument (in Bytes)</param>
            <param name="duplicatePolicy">Optioal: overwrite key and database configuration for DUPLICATE_POLICY</param>
            <returns>The timestamp value of the new sample</returns>
            <remarks><seealso href="https://redis.io/commands/ts.add"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.MAddAsync(System.Collections.Generic.IReadOnlyCollection{System.ValueTuple{System.String,NRedisStack.DataTypes.TimeStamp,System.Double}})">
            <summary>
            Append new samples to multiple series.
            </summary>
            <param name="sequence">An Collection of (key, timestamp, value) tuples </param>
            <returns>List of timestamps of the new samples</returns>
            <remarks><seealso href="https://redis.io/commands/ts.madd"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.IncrByAsync(System.String,System.Double,System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64})">
            <summary>
            Creates a new sample that increments the latest sample's value.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="value">Delta to add</param>
            <param name="timestamp">Optional: TimeStamp to add. UNIX timestamp of the sample. * can be used for automatic timestamp (using the system clock)</param>
            <param name="retentionTime">Optional: Maximum age for samples compared to last event time (in milliseconds)</param>
            <param name="labels">Optional: Collaction of label-value pairs that represent metadata labels of the key</param>
            <param name="uncompressed">Optional: Adding this flag will keep data in an uncompressed form</param>
            <param name="chunkSizeBytes">Optional: Each time-series uses chunks of memory of fixed size for time series samples.
            You can alter the default TS_db chunk size by passing the chunk_size argument (in Bytes)</param>
            <returns>The latests sample timestamp (updated sample)</returns>
            <remarks><seealso href="https://redis.io/commands/ts.incrby"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.DecrByAsync(System.String,System.Double,System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64})">
            <summary>
            Creates a new sample that decrements the latest sample's value.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="value">Delta to substract</param>
            <param name="timestamp">Optional: TimeStamp to add. UNIX timestamp of the sample. * can be used for automatic timestamp (using the system clock)</param>
            <param name="retentionTime">Optional: Maximum age for samples compared to last event time (in milliseconds)</param>
            <param name="labels">Optional: Collaction of label-value pairs that represent metadata labels of the key</param>
            <param name="uncompressed">Optional: Adding this flag will keep data in an uncompressed form</param>
            <param name="chunkSizeBytes">Optional: Each time-series uses chunks of memory of fixed size for time series samples.
            You can alter the default TS_db chunk size by passing the chunk_size argument (in Bytes)</param>
            <returns>The latests sample timestamp (updated sample)</returns>
            <remarks><seealso href="https://redis.io/commands/ts.decrby"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.DelAsync(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp)">
            <summary>
            Delete data points for a given timeseries and interval range in the form of start and end delete timestamps.
            The given timestamp interval is closed (inclusive), meaning start and end data points will also be deleted.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="fromTimeStamp">Start timestamp for the range deletion.</param>
            <param name="toTimeStamp">End timestamp for the range deletion.</param>
            <returns>The count of deleted items</returns>
            <remarks><seealso href="https://redis.io/commands/ts.del"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.CreateRuleAsync(System.String,NRedisStack.DataTypes.TimeSeriesRule,System.Int64)">
            <summary>
            Create a compaction rule.
            </summary>
            <param name="sourceKey">Key name for source time series</param>
            <param name="rule">TimeSeries rule:
            Key name for destination time series, Aggregation type and Time bucket for aggregation in milliseconds</param>
            <param name="alignTimestamp">ensures that there is a bucket that starts
            exactly at alignTimestamp and aligns all other buckets accordingly.
            It is expressed in milliseconds. The default value is 0 aligned with the epoch</param>
            <returns>If the operation executed successfully</returns>
            <remarks><seealso href="https://redis.io/commands/ts.createrule"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.DeleteRuleAsync(System.String,System.String)">
            <summary>
            Deletes a compaction rule.
            </summary>
            <param name="sourceKey">Key name for source time series</param>
            <param name="destKey">Key name for destination time series</param>
            <returns>If the operation executed successfully</returns>
            <remarks><seealso href="https://redis.io/commands/ts.deleterule"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.GetAsync(System.String,System.Boolean)">
            <summary>
            Get the last sample.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <returns>TimeSeriesTuple that represents the last sample. Null if the series is empty. </returns>
            <remarks><seealso href="https://redis.io/commands/ts.get"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.MGetAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Get the last samples matching the specific filter.
            </summary>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <param name="filter">A sequence of filters</param>
            <param name="withLabels">Optional: Include in the reply the label-value pairs that represent metadata labels of the time-series</param>
            <param name="selectedLabels">Optional: returns a subset of the label-value pairs that represent metadata labels of the time series</param>
            <returns>The command returns the last sample for entries with labels matching the specified filter.</returns>
            <remarks><seealso href="https://redis.io/commands/ts.mget"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.RangeAsync(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean)">
            <summary>
            Query a range.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="fromTimeStamp">Start timestamp for the range query. "-" can be used to express the minimum possible timestamp.</param>
            <param name="toTimeStamp">End timestamp for range query, + can be used to express the maximum possible timestamp.</param>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <param name="filterByTs">Optional: List of timestamps to filter the result by specific timestamps</param>
            <param name="filterByValue">Optional: Filter result by value using minimum and maximum</param>
            <param name="count">Optional: Returned list size.</param>
            <param name="align">Optional: Timestamp for alignment control for aggregation.</param>
            <param name="aggregation">Optional: Aggregation type</param>
            <param name="timeBucket">Optional: Time bucket for aggregation in milliseconds</param>
            <param name="bt">Optional: controls how bucket timestamps are reported.</param>
            <param name="empty">Optional: when specified, reports aggregations also for empty buckets</param>
            <returns>A list of TimeSeriesTuple</returns>
            <remarks><seealso href="https://redis.io/commands/ts.range"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.RevRangeAsync(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean)">
            <summary>
            Query a range in reverse direction.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="fromTimeStamp">Start timestamp for the range query. "-" can be used to express the minimum possible timestamp.</param>
            <param name="toTimeStamp">End timestamp for range query, + can be used to express the maximum possible timestamp.</param>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <param name="filterByTs">Optional: List of timestamps to filter the result by specific timestamps</param>
            <param name="filterByValue">Optional: Filter result by value using minimum and maximum</param>
            <param name="count">Optional: Returned list size.</param>
            <param name="align">Optional: Timestamp for alignment control for aggregation.</param>
            <param name="aggregation">Optional: Aggregation type</param>
            <param name="timeBucket">Optional: Time bucket for aggregation in milliseconds</param>
            <param name="bt">Optional: controls how bucket timestamps are reported.</param>
            <param name="empty">Optional: when specified, reports aggregations also for empty buckets</param>
            <returns>A list of TimeSeriesTuple</returns>
            <remarks><seealso href="https://redis.io/commands/ts.revrange"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.MRangeAsync(NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean,System.Nullable{System.ValueTuple{System.String,NRedisStack.Literals.Enums.TsReduce}})">
            <summary>
            Query a timestamp range across multiple time-series by filters.
            </summary>
            <param name="fromTimeStamp"> Start timestamp for the range query. - can be used to express the minimum possible timestamp.</param>
            <param name="toTimeStamp">End timestamp for range query, + can be used to express the maximum possible timestamp.</param>
            <param name="filter">A sequence of filters</param>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <param name="filterByTs">Optional: List of timestamps to filter the result by specific timestamps</param>
            <param name="filterByValue">Optional: Filter result by value using minimum and maximum</param>
            <param name="withLabels">Optional: Include in the reply the label-value pairs that represent metadata labels of the time-series</param>
            <param name="selectLabels">Optional: Include in the reply only a subset of the key-value pair labels of a series.</param>
            <param name="count">Optional: Maximum number of returned results per time-series.</param>
            <param name="align">Optional: Timestamp for alignment control for aggregation.</param>
            <param name="aggregation">Optional: Aggregation type</param>
            <param name="timeBucket">Optional: Time bucket for aggregation in milliseconds</param>
            <param name="bt">Optional: controls how bucket timestamps are reported.</param>
            <param name="empty">Optional: when specified, reports aggregations also for empty buckets</param>
            <param name="groupbyTuple">Optional: Grouping by fields the results, and applying reducer functions on each group.</param>
            <returns>A list of (key, labels, values) tuples. Each tuple contains the key name, its labels and the values which satisfies the given range and filters.</returns>
            <remarks><seealso href="https://redis.io/commands/ts.mrange"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.MRevRangeAsync(NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean,System.Nullable{System.ValueTuple{System.String,NRedisStack.Literals.Enums.TsReduce}})">
            <summary>
            Query a timestamp range in reverse order across multiple time-series by filters.
            </summary>
            <param name="fromTimeStamp"> Start timestamp for the range query. - can be used to express the minimum possible timestamp.</param>
            <param name="toTimeStamp">End timestamp for range query, + can be used to express the maximum possible timestamp.</param>
            <param name="filter">A sequence of filters</param>
            <param name="latest">is used when a time series is a compaction. With LATEST, TS.MRANGE also reports
            the compacted value of the latest possibly partial bucket, given that this bucket's start time falls
            within [fromTimestamp, toTimestamp]. Without LATEST, TS.MRANGE does not report the latest possibly partial bucket.
            When a time series is not a compaction, LATEST is ignored.</param>
            <param name="filterByTs">Optional: List of timestamps to filter the result by specific timestamps</param>
            <param name="filterByValue">Optional: Filter result by value using minimum and maximum</param>
            <param name="withLabels">Optional: Include in the reply the label-value pairs that represent metadata labels of the time-series</param>
            <param name="selectLabels">Optional: Include in the reply only a subset of the key-value pair labels of a series.</param>
            <param name="count">Optional: Maximum number of returned results per time-series.</param>
            <param name="align">Optional: Timestamp for alignment control for aggregation.</param>
            <param name="aggregation">Optional: Aggregation type</param>
            <param name="timeBucket">Optional: Time bucket for aggregation in milliseconds</param>
            <param name="bt">Optional: controls how bucket timestamps are reported.</param>
            <param name="empty">Optional: when specified, reports aggregations also for empty buckets</param>
            <param name="groupbyTuple">Optional: Grouping by fields the results, and applying reducer functions on each group.</param>
            <returns>A list of (key, labels, values) tuples. Each tuple contains the key name, its labels and the values which satisfies the given range and filters.</returns>
            <remarks><seealso href="https://redis.io/commands/ts.mrevrange"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.InfoAsync(System.String,System.Boolean)">
            <summary>
            Returns the information for a specific time-series key.
            </summary>
            <param name="key">Key name for timeseries</param>
            <param name="debug">An optional flag to get a more detailed information about the chunks.</param>
            <returns>TimeSeriesInformation for the specific key.</returns>
            <remarks><seealso href="https://redis.io/commands/ts.info"/></remarks>
        </member>
        <member name="M:NRedisStack.ITimeSeriesCommandsAsync.QueryIndexAsync(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Get all the keys matching the filter list.
            </summary>
            <param name="filter">A sequence of filters</param>
            <returns>A list of keys with labels matching the filters.</returns>
            <remarks><seealso href="https://redis.io/commands/ts.queryindex"/></remarks>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.Create(System.String,System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.Alter(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.Add(System.String,NRedisStack.DataTypes.TimeStamp,System.Double,System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.MAdd(System.Collections.Generic.IReadOnlyCollection{System.ValueTuple{System.String,NRedisStack.DataTypes.TimeStamp,System.Double}})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.IncrBy(System.String,System.Double,System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.DecrBy(System.String,System.Double,System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.Del(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.CreateRule(System.String,NRedisStack.DataTypes.TimeSeriesRule,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.DeleteRule(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.Get(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.MGet(System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.Range(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.RevRange(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.MRange(NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean,System.Nullable{System.ValueTuple{System.String,NRedisStack.Literals.Enums.TsReduce}})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.MRevRange(NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean,System.Nullable{System.ValueTuple{System.String,NRedisStack.Literals.Enums.TsReduce}})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.Info(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommands.QueryIndex(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.CreateAsync(System.String,System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.AlterAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.AddAsync(System.String,NRedisStack.DataTypes.TimeStamp,System.Double,System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsDuplicatePolicy})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.MAddAsync(System.Collections.Generic.IReadOnlyCollection{System.ValueTuple{System.String,NRedisStack.DataTypes.TimeStamp,System.Double}})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.IncrByAsync(System.String,System.Double,System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.DecrByAsync(System.String,System.Double,System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeSeriesLabel},System.Nullable{System.Boolean},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.DelAsync(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.CreateRuleAsync(System.String,NRedisStack.DataTypes.TimeSeriesRule,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.DeleteRuleAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.GetAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.MGetAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.RangeAsync(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.RevRangeAsync(System.String,NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.MRangeAsync(NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean,System.Nullable{System.ValueTuple{System.String,NRedisStack.Literals.Enums.TsReduce}})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.MRevRangeAsync(NRedisStack.DataTypes.TimeStamp,NRedisStack.DataTypes.TimeStamp,System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Collections.Generic.IReadOnlyCollection{NRedisStack.DataTypes.TimeStamp},System.Nullable{System.ValueTuple{System.Int64,System.Int64}},System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyCollection{System.String},System.Nullable{System.Int64},System.Nullable{NRedisStack.DataTypes.TimeStamp},System.Nullable{NRedisStack.Literals.Enums.TsAggregation},System.Nullable{System.Int64},System.Nullable{NRedisStack.Literals.Enums.TsBucketTimestamps},System.Boolean,System.Nullable{System.ValueTuple{System.String,NRedisStack.Literals.Enums.TsReduce}})">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.InfoAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TimeSeriesCommandsAsync.QueryIndexAsync(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:NRedisStack.TopK.DataTypes.TopKInformation">
            <summary>
            This class represents the response for TOPK.INFO command.
            This object has Read-only properties and cannot be generated outside a TOPK.INFO response.
            </summary>
        </member>
        <member name="M:NRedisStack.ITopKCommands.Add(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Increases the count of item by increment.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="items">Items to be added</param>
            <returns>Array of simple-string-reply - if an element was dropped from the TopK list, null otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/topk.add"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommands.Count(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Returns count for an items.
            </summary>
            <param name="key">Name of sketch where item is counted</param>
            <param name="item">Items to be counted.</param>
            <returns>count for responding item.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.count"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommands.IncrBy(StackExchange.Redis.RedisKey,System.Tuple{StackExchange.Redis.RedisValue,System.Int64}[])">
            <summary>
            Increase the score of an item in the data structure by increment.
            </summary>
            <param name="key">Name of sketch where item is added.</param>
            <param name="itemIncrements">Tuple of The items which counter is to be increased
            and the Amount by which the item score is to be increased.</param>
            <returns>Score of each item after increment.</returns>
            <remarks><seealso href="https://redis.io/commands/topk.incrby"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommands.Info(StackExchange.Redis.RedisKey)">
            <summary>
            Return TopK information.
            </summary>
            <param name="key">Name of the key to return information about.</param>
            <returns>TopK Information.</returns>
            <remarks><seealso href="https://redis.io/commands/topk.info"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommands.List(StackExchange.Redis.RedisKey,System.Boolean)">
            <summary>
            Return full list of items in Top K list.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="withcount">return Count of each element is returned.</param>
            <returns>Full list of items in Top K list</returns>
            <remarks><seealso href="https://redis.io/commands/topk.list"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommands.Query(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Returns the count for one or more items in a sketch.
            </summary>
            <param name="key">The name of the sketch</param>
            <param name="item">Item to be queried.</param>
            <returns><see langword="true"/> if item is in Top-K, <see langword="false"/> otherwise/></returns>
            <remarks><seealso href="https://redis.io/commands/topk.query"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommands.Query(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Returns the count for one or more items in a sketch.
            </summary>
            <param name="key">The name of the sketch</param>
            <param name="items">Items to be queried.</param>
            <returns>Bolean Array where <see langword="true"/> if item is in Top-K, <see langword="false"/> otherwise/></returns>
            <remarks><seealso href="https://redis.io/commands/topk.query"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommands.Reserve(StackExchange.Redis.RedisKey,System.Int64,System.Int64,System.Int64,System.Double)">
            <summary>
            Initializes a TopK with specified parameters.
            </summary>
            <param name="key">Key under which the sketch is to be found.</param>
            <param name="topk">Number of top occurring items to keep.</param>
            <param name="width">Number of counters kept in each array. (Default 8)</param>
            <param name="depth">Number of arrays. (Default 7)</param>
            <param name="decay">The probability of reducing a counter in an occupied bucket. (Default 0.9)</param>
            <returns><see langword="true"/> if executed correctly, error otherwise/></returns>
            <remarks><seealso href="https://redis.io/commands/topk.reserve"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommandsAsync.AddAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Increases the count of item by increment.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="items">Items to be added</param>
            <returns>Array of simple-string-reply - if an element was dropped from the TopK list, null otherwise</returns>
            <remarks><seealso href="https://redis.io/commands/topk.add"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommandsAsync.CountAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Returns count for an items.
            </summary>
            <param name="key">Name of sketch where item is counted</param>
            <param name="item">Items to be counted.</param>
            <returns>count for responding item.</returns>
            <remarks><seealso href="https://redis.io/commands/cf.count"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommandsAsync.IncrByAsync(StackExchange.Redis.RedisKey,System.Tuple{StackExchange.Redis.RedisValue,System.Int64}[])">
            <summary>
            Increase the score of an item in the data structure by increment.
            </summary>
            <param name="key">Name of sketch where item is added.</param>
            <param name="itemIncrements">Tuple of The items which counter is to be increased
            and the Amount by which the item score is to be increased.</param>
            <returns>Score of each item after increment.</returns>
            <remarks><seealso href="https://redis.io/commands/topk.incrby"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommandsAsync.InfoAsync(StackExchange.Redis.RedisKey)">
            <summary>
            Return TopK information.
            </summary>
            <param name="key">Name of the key to return information about.</param>
            <returns>TopK Information.</returns>
            <remarks><seealso href="https://redis.io/commands/topk.info"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommandsAsync.ListAsync(StackExchange.Redis.RedisKey,System.Boolean)">
            <summary>
            Return full list of items in Top K list.
            </summary>
            <param name="key">The name of the sketch.</param>
            <param name="withcount">return Count of each element is returned.</param>
            <returns>Full list of items in Top K list</returns>
            <remarks><seealso href="https://redis.io/commands/topk.list"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommandsAsync.QueryAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            Returns the count for one or more items in a sketch.
            </summary>
            <param name="key">The name of the sketch</param>
            <param name="item">Item to be queried.</param>
            <returns><see langword="true"/> if item is in Top-K, <see langword="false"/> otherwise/></returns>
            <remarks><seealso href="https://redis.io/commands/topk.query"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommandsAsync.QueryAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Returns the count for one or more items in a sketch.
            </summary>
            <param name="key">The name of the sketch</param>
            <param name="items">Items to be queried.</param>
            <returns>Bolean Array where <see langword="true"/> if item is in Top-K, <see langword="false"/> otherwise/></returns>
            <remarks><seealso href="https://redis.io/commands/topk.query"/></remarks>
        </member>
        <member name="M:NRedisStack.ITopKCommandsAsync.ReserveAsync(StackExchange.Redis.RedisKey,System.Int64,System.Int64,System.Int64,System.Double)">
            <summary>
            Initializes a TopK with specified parameters.
            </summary>
            <param name="key">Key under which the sketch is to be found.</param>
            <param name="topk">Number of top occurring items to keep.</param>
            <param name="width">Number of counters kept in each array. (Default 8)</param>
            <param name="depth">Number of arrays. (Default 7)</param>
            <param name="decay">The probability of reducing a counter in an occupied bucket. (Default 0.9)</param>
            <returns><see langword="true"/> if executed correctly, error otherwise/></returns>
            <remarks><seealso href="https://redis.io/commands/topk.reserve"/></remarks>
        </member>
        <member name="M:NRedisStack.TopKCommands.Add(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommands.Count(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommands.IncrBy(StackExchange.Redis.RedisKey,System.Tuple{StackExchange.Redis.RedisValue,System.Int64}[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommands.Info(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommands.List(StackExchange.Redis.RedisKey,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommands.Query(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommands.Query(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommands.Reserve(StackExchange.Redis.RedisKey,System.Int64,System.Int64,System.Int64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommandsAsync.AddAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommandsAsync.CountAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommandsAsync.IncrByAsync(StackExchange.Redis.RedisKey,System.Tuple{StackExchange.Redis.RedisValue,System.Int64}[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommandsAsync.InfoAsync(StackExchange.Redis.RedisKey)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommandsAsync.ListAsync(StackExchange.Redis.RedisKey,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommandsAsync.QueryAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommandsAsync.QueryAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <inheritdoc/>
        </member>
        <member name="M:NRedisStack.TopKCommandsAsync.ReserveAsync(StackExchange.Redis.RedisKey,System.Int64,System.Int64,System.Int64,System.Double)">
            <inheritdoc/>
        </member>
    </members>
</doc>
